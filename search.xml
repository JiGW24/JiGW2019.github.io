<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Elasticsearch学习备忘</title>
      <link href="/2019/07/04/Elasticsearch%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/"/>
      <url>/2019/07/04/Elasticsearch%E5%AD%A6%E4%B9%A0%E5%A4%87%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Elasticsearch学习记录"><a href="#Elasticsearch学习记录" class="headerlink" title="Elasticsearch学习记录"></a>Elasticsearch学习记录</h2><p>本文由朋友——zhoulu整理，感谢</p><blockquote><p>1、Elasticsearch的特点</p><ul><li>可以分布式集群，对海量数据进行近实时的处理；</li><li>对用户而言，开箱即用,非常简单。如果数据量不大，操作不会太复杂；</li><li>具有关系型数据库没有的功能，比如全文检索，同义词处理，相关度排名，复杂数据分析，海量数据的近实时处理；</li><li>基于lucene，隐藏了复杂性，提供简单易用的restful api接口、java api接口</li></ul><p>2、elasticsearch的核心概念</p><ul><li>Cluster：集群包含多个节点，每个节点属于哪个集群是通过配置来决定的（默认是elasticsearch）</li><li>Node：集群中的一个节点，节点默认会自动加入名叫”elasticsearch”的集群。一个elasticsearch服务就是一个节点，比如一台机器启动两个es服务，就有两个节点。</li><li>Index:索引，相当于mysql的数据库，包含一堆有相似结构的文档数据。</li><li>Type:类型，相当于mysql的表，index中的一个逻辑数据分类。</li><li>document:文档，相当于mysql表中的一行记录，是es中的最小数据单元。</li><li>shard:分片，单台机器无法存储大量数据，es可以将一个索引中的数据切分为多个shard，分布在多台服务器上存储。</li><li>replica:副本，为了防止宕机，shard丢失，所以最小的高可用配置，是2台服务器。</li></ul></blockquote><h2 id="1-与Elasticsearch交互"><a href="#1-与Elasticsearch交互" class="headerlink" title="1.与Elasticsearch交互"></a>1.与Elasticsearch交互</h2><h3 id="1-1-Java-API"><a href="#1-1-Java-API" class="headerlink" title="1.1 Java API"></a>1.1 Java API</h3><ul><li><p><strong>节点客户端(node client)：</strong></p><p>节点客户端以无数据节点(none data node)身份加入集群，换言之，它自己不存储任何数据，但是它知道数据在集群中的具体位置，并且能够直接转发请求到对应的节点上。</p></li><li><p><strong>传输客户端(Transport client)：</strong></p><p>这个更轻量的传输客户端能够发送请求到远程集群。它自己不加入集群，只是简单转发请求给集群中的节点。</p><p>两个Java客户端都通过9300端口与集群交互，使用Elasticsearch传输协议(Elasticsearch Transport Protocol)。集群中的节点之间也通过9300端口进行通信。如果此端口未开放，你的节点将不能组成集群。</p><blockquote><p><strong>TIP</strong></p><p>Java客户端所在的Elasticsearch版本必须与集群中其他节点一致，否则，它们可能互相无法识别。</p></blockquote><p>关于Java API的更多信息请查看相关章节：<a href="http://www.elasticsearch.org/guide/" target="_blank" rel="noopener">Java API</a></p></li></ul><h3 id="1-2-基于HTTP协议"><a href="#1-2-基于HTTP协议" class="headerlink" title="1.2 基于HTTP协议"></a>1.2 基于HTTP协议</h3><ul><li><p>==以<strong>JSON</strong>为数据交互格式的<strong>RESTful API</strong>==，通过9200端口的与Elasticsearch进行通信，</p><blockquote><p>Elasticsearch官方提供了多种程序语言的客户端——Groovy，Javascript， .NET，PHP，Perl，Python，以及Ruby——还有很多由社区提供的客户端和插件，所有这些可以在<a href="http://www.elasticsearch.org/guide/" target="_blank" rel="noopener">文档</a>中找到。</p></blockquote></li><li><p>向Elasticsearch发出的请求的组成部分与其它普通的HTTP请求是一样的：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">curl -X&lt;VERB&gt; <span class="string">'&lt;PROTOCOL&gt;://&lt;HOST&gt;:&lt;PORT&gt;/&lt;PATH&gt;?&lt;QUERY_STRING&gt;'</span> -d <span class="string">'&lt;BODY&gt;'</span></span><br></pre></td></tr></table></figure><ul><li>VERB HTTP方法：<code>GET</code>, <code>POST</code>, <code>PUT</code>, <code>HEAD</code>,<code>DELETE</code></li><li>PROTOCOL http或者https协议（只有在Elasticsearch前面有https代理的时候可用）</li><li>HOST Elasticsearch集群中的任何一个节点的主机名，如果是在本地的节点，那么就叫localhost</li><li>PORT Elasticsearch HTTP服务所在的端口，默认为9200</li><li>PATH API路径（例如_count将返回集群中文档的数量），PATH可以包含多个组件，例如_cluster/stats或者_nodes/stats/jvm</li><li>QUERY_STRING一些可选的查询请求参数，例如<code>?pretty</code>参数将使请求返回更加美观易读的JSON数据</li><li>BODY 一个JSON格式的请求主体（如果请求需要的话）</li></ul></li></ul><p>  举例说明，为了计算集群中的文档数量，我们可以这样做：</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">curl -XGET <span class="string">'http://localhost:9200/_count?pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "match_all": &#123;&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">'</span></span><br></pre></td></tr></table></figure><p>  Elasticsearch返回一个类似<code>200 OK</code>的HTTP状态码和JSON格式的响应主体（除了<code>HEAD</code>请求）。上面的请求会得到如下的JSON格式的响应主体：</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"count"</span> : <span class="number">0</span>,</span><br><span class="line">    <span class="string">"_shards"</span> : &#123;</span><br><span class="line">        <span class="string">"total"</span> : <span class="number">5</span>,</span><br><span class="line">        <span class="string">"successful"</span> : <span class="number">5</span>,</span><br><span class="line">        <span class="string">"failed"</span> : <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  我们看不到HTTP头是因为我们没有让<code>curl</code>显示它们，如果要显示，使用<code>curl</code>命令后跟<code>-i</code>参数:</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">curl -i -XGET <span class="string">'localhost:9200/'</span></span><br></pre></td></tr></table></figure><p>  一个完整的请求形如：</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">curl -XGET <span class="string">'localhost:9200/_count?pretty'</span> -d <span class="string">'</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "query": &#123;</span></span><br><span class="line"><span class="string">        "match_all": &#123;&#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;'</span></span><br></pre></td></tr></table></figure><p>  我们将<strong>简写</strong>成这样：</p>  <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">GET /_count</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span>: &#123;</span><br><span class="line">        <span class="string">"match_all"</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-索引-文档"><a href="#2-索引-文档" class="headerlink" title="2.索引/文档"></a>2.索引/文档</h2><ul><li><p>在Elasticsearch中存储数据的行为就叫做<strong>索引(indexing)</strong>，不过在索引之前，我们需要明确数据应该存储在哪里。</p></li><li><p>在Elasticsearch中，文档归属于一种<strong>类型(type)</strong> ,而这些类型存在于<strong>索引(index)</strong>中，我们可以画一些简单的对比图来类比传统关系型数据库：</p><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">Relational DB -&gt; Databases -&gt; Tables -&gt; Rows -&gt; Columns</span><br><span class="line">Elasticsearch -&gt; Indices   -&gt; Types  -&gt; Documents -&gt; Fields</span><br></pre></td></tr></table></figure></li><li><p>Elasticsearch集群可以包含多个<strong>索引(indices)</strong>（数据库），每一个索引可以包含多个<strong>类型(types)</strong>（表），每一个类型包含多个<strong>文档(documents)</strong>（行），然后每个文档包含多个<strong>字段(Fields)</strong>（列）。</p><blockquote><p>「索引」含义的区分</p><ul><li>索引（名词），一个<strong>索引(index)</strong>就像是传统关系数据库中的<strong>数据库</strong>，它是相关文档存储的地方，index的复数是<strong>indices</strong>或<strong>indexes</strong>。</li><li>索引（动词） <strong>「索引一个文档」</strong>表示把一个文档存储到<strong>索引（名词）</strong>里，以便它可以被检索或者查询。这很像SQL中的<code>INSERT</code>关键字，差别是，如果文档已经存在，新的文档将覆盖旧的文档。</li><li>倒排索引传统数据库为特定列增加一个索引，例如B-Tree索引来加速检索。Elasticsearch和Lucene使用一种叫做<strong>倒排索引(inverted index)</strong>的数据结构来达到相同目的。</li></ul></blockquote></li></ul><ul><li><p>如果创建员工目录，我们将进行如下操作：</p><ul><li>为每个员工的<strong>文档(document)</strong>建立索引，每个文档包含了相应员工的所有信息。</li><li>每个文档的类型为<code>employee</code>。</li><li><code>employee</code>类型归属于索引<code>megacorp</code>。</li><li><code>megacorp</code>索引存储在Elasticsearch集群中。</li></ul><p>我们能通过一个命令来完成对一个员工的文档存储：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">PUT /megacorp/employee/<span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"first_name"</span> : <span class="string">"John"</span>,</span><br><span class="line">    <span class="string">"last_name"</span> :  <span class="string">"Smith"</span>,</span><br><span class="line">    <span class="string">"age"</span> :        <span class="number">25</span>,</span><br><span class="line">    <span class="string">"about"</span> :      <span class="string">"I love to go rock climbing"</span>,</span><br><span class="line">    <span class="string">"interests"</span>: [ <span class="string">"sports"</span>, <span class="string">"music"</span> ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中：path: <code>/megacorp/employee/1</code>包含三部分信息：</p><table><thead><tr><th>名字</th><th>说明</th></tr></thead><tbody><tr><td>megacorp</td><td>索引名</td></tr><tr><td>employee</td><td>类型名</td></tr><tr><td>1</td><td>这个员工的ID</td></tr></tbody></table></li><li><p>返回新</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"_index"</span>: <span class="string">"customer"</span>,</span><br><span class="line">  <span class="string">"_type"</span>: <span class="string">"external"</span>,</span><br><span class="line">  <span class="string">"_id"</span>: <span class="string">"AVyc9L6dtgHksqXKpTlM"</span>,</span><br><span class="line">  <span class="string">"_version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"result"</span>: <span class="string">"created"</span>,</span><br><span class="line">  <span class="string">"_shards"</span>: &#123;</span><br><span class="line">    <span class="string">"total"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"successful"</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">"failed"</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"created"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>_index：文档存储的地方</li><li>_type： 文档代表的对象的类</li><li>_id：文档的唯一标识，是 URL-safe、 基于 Base64 编码且长度为20个字符的 GUID 字符串</li><li>_version：版本控制</li></ul></li></ul><h3 id="2-1-文档元数据"><a href="#2-1-文档元数据" class="headerlink" title="2.1 文档元数据"></a>2.1 文档元数据</h3><ul><li><p>一个文档不只有数据。它还包含了<strong>元数据(metadata)</strong> —— <strong>关于</strong>文档的信息。三个必须的元数据节点是：</p><table><thead><tr><th>节点</th><th>说明</th></tr></thead><tbody><tr><td><code>_index</code></td><td>文档存储的地方</td></tr><tr><td><code>_type</code></td><td>文档代表的对象的类</td></tr><tr><td><code>_id</code></td><td>文档的唯一标识</td></tr></tbody></table></li><li><p><code>_index</code></p><p><strong>索引(index)</strong>类似于关系型数据库里的“数据库”——它是我们存储和索引关联数据的地方。</p><blockquote><p>事实上，我们的数据被存储和索引在<strong>分片(shards)</strong>中，索引只是一个把一个或多个分片分组在一起的逻辑空间。然而，这只是一些内部细节——我们的程序完全不用关心分片。对于我们的程序而言，文档存储在<strong>索引(index)</strong>中。剩下的细节由Elasticsearch关心既可。</p></blockquote></li><li><p><code>_type</code></p><p>在Elasticsearch中，我们使用相同<strong>类型(type)</strong>的文档表示相同的“事物”，因为他们的数据结构也是相同的。</p><p>每个<strong>类型(type)</strong>都有自己的<strong>映射(mapping)</strong>或者结构定义，就像传统数据库表中的列一样。所有类型下的文档被存储在同一个索引下，但是类型的<strong>映射(mapping)</strong>会告诉Elasticsearch不同的文档如何被索引。我们将会在《映射》章节探讨如何定义和管理映射，但是现在我们将依赖Elasticsearch去自动处理数据结构。</p><p><code>_type</code>的名字可以是大写或小写，不能包含下划线或逗号。我们将使用<code>blog</code>做为类型名。</p></li><li><p><code>_id</code></p><p><strong>id</strong>仅仅是一个字符串，它与<code>_index</code>和<code>_type</code>组合时，就可以在Elasticsearch中唯一标识一个文档。当创建一个文档，你可以自定义<code>_id</code>，也可以让Elasticsearch帮你自动生成。</p></li></ul><h2 id="3-检索文档"><a href="#3-检索文档" class="headerlink" title="3.检索文档"></a>3.检索文档</h2><h3 id="3-1-检索"><a href="#3-1-检索" class="headerlink" title="3.1 检索"></a>3.1 检索</h3><ul><li><p>我们只要执行HTTP GET请求并指出文档的“地址”——<strong>索引、类型和ID既可</strong>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/<span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>我们通过HTTP方法<code>GET</code>来检索文档，同样的，我们可以使用<code>DELETE</code>方法删除文档，使用<code>HEAD</code>方法检查某文档是否存在。如果想更新已存在的文档，我们只需再<code>PUT</code>一次。</p></blockquote></li></ul><h3 id="3-2-简单搜索"><a href="#3-2-简单搜索" class="headerlink" title="3.2 简单搜索"></a>3.2 简单搜索</h3><ul><li><p>使用<code>GET</code>请求 获取全部员工请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br></pre></td></tr></table></figure></li><li><p>我们搜索姓氏中包含<strong>“Smith”</strong>的员工。要做到这一点，我们将在命令行中使用轻量级的搜索方法。这种方法常被称作<strong>查询字符串(query string)</strong>搜索，因为我们像传递URL参数一样去传递查询语句：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search?q=last_name:Smith</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-3-使用DSL语句查询"><a href="#3-3-使用DSL语句查询" class="headerlink" title="3.3 使用DSL语句查询"></a>3.3 使用DSL语句查询</h3><ul><li><p>Elasticsearch提供丰富且灵活的查询语言叫做<strong>DSL查询(Query DSL)</strong> ,它允许你构建更加复杂、强大的查询。</p><p><strong>DSL(Domain Specific Language特定领域语言)</strong>以JSON请求体的形式出现</p></li><li><p>如查询姓氏中包含<strong>“Smith”</strong>的员工</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span> : &#123;</span><br><span class="line">        <span class="string">"match"</span> : &#123;</span><br><span class="line">            <span class="string">"last_name"</span> : <span class="string">"Smith"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>找到姓氏为“Smith”的员工，但是我们只想得到年龄大于30岁的员工。我们的语句将添加<strong>过滤器(filter)</strong> </p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span> : &#123;</span><br><span class="line">        <span class="string">"filtered"</span> : &#123;</span><br><span class="line">            <span class="string">"filter"</span> : &#123;</span><br><span class="line">                <span class="string">"range"</span> : &#123;</span><br><span class="line">                    <span class="string">"age"</span> : &#123; <span class="string">"gt"</span> : <span class="number">30</span> &#125; &lt;<span class="number">1</span>&gt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"query"</span> : &#123;</span><br><span class="line">                <span class="string">"match"</span> : &#123;</span><br><span class="line">                    <span class="string">"last_name"</span> : <span class="string">"smith"</span> &lt;<span class="number">2</span>&gt;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>&lt;1&gt;这部分查询属于<strong>区间过滤器(range filter)</strong> ,它用于查找所有年龄大于30岁的数据—— <code>gt</code>为”greater than”的缩写。</li><li>&lt;2&gt;这部分查询与之前的<code>match</code><strong>语句(query)</strong>一致。</li></ul></li><li><p>高亮搜索</p><p>之前的语句上增加<code>highlight</code>参数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"query"</span> : &#123;</span><br><span class="line">        <span class="string">"match_phrase"</span> : &#123;</span><br><span class="line">            <span class="string">"about"</span> : <span class="string">"rock climbing"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"highlight"</span>: &#123;</span><br><span class="line">        <span class="string">"fields"</span> : &#123;</span><br><span class="line">            <span class="string">"about"</span> : &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在返回结果中会有一个新的部分叫做<code>highlight</code>，这里包含了来自<code>about</code>字段中的文本，并且用<code>&lt;em&gt;&lt;/em&gt;</code>来标识匹配到的单词。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="string">"hits"</span>: &#123;</span><br><span class="line">      <span class="string">"total"</span>:      <span class="number">1</span>,</span><br><span class="line">      <span class="string">"max_score"</span>:  <span class="number">0.23013961</span>,</span><br><span class="line">      <span class="string">"hits"</span>: [</span><br><span class="line">         &#123;</span><br><span class="line">            ...</span><br><span class="line">            <span class="string">"_score"</span>:         <span class="number">0.23013961</span>,</span><br><span class="line">            <span class="string">"_source"</span>: &#123;</span><br><span class="line">               <span class="string">"first_name"</span>:  <span class="string">"John"</span>,</span><br><span class="line">               <span class="string">"last_name"</span>:   <span class="string">"Smith"</span>,</span><br><span class="line">               <span class="string">"age"</span>:         <span class="number">25</span>,</span><br><span class="line">               <span class="string">"about"</span>:       <span class="string">"I love to go rock climbing"</span>,</span><br><span class="line">               <span class="string">"interests"</span>: [ <span class="string">"sports"</span>, <span class="string">"music"</span> ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"highlight"</span>: &#123;</span><br><span class="line">               <span class="string">"about"</span>: [</span><br><span class="line">                  <span class="string">"I love to go &lt;em&gt;rock&lt;/em&gt; &lt;em&gt;climbing&lt;/em&gt;"</span> &lt;<span class="number">1</span>&gt;</span><br><span class="line">               ]</span><br><span class="line">            &#125;</span><br><span class="line">         &#125;</span><br><span class="line">      ]</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>total</code>：返回记录数</li><li><code>max_score</code>：最高的匹配程度</li><li><code>hits</code>：返回的记录组成的数组。</li></ul></li></ul><h3 id="3-4-空搜索"><a href="#3-4-空搜索" class="headerlink" title="3.4.空搜索"></a>3.4.空搜索</h3><ul><li><p>输入</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">GET /_search</span><br></pre></td></tr></table></figure></li><li><p>返回</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="string">"hits"</span> : &#123;</span><br><span class="line">      <span class="string">"total"</span> :       <span class="number">14</span>,</span><br><span class="line">      <span class="string">"hits"</span> : [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"_index"</span>:   <span class="string">"us"</span>,</span><br><span class="line">          <span class="string">"_type"</span>:    <span class="string">"tweet"</span>,</span><br><span class="line">          <span class="string">"_id"</span>:      <span class="string">"7"</span>,</span><br><span class="line">          <span class="string">"_score"</span>:   <span class="number">1</span>,</span><br><span class="line">          <span class="string">"_source"</span>: &#123;</span><br><span class="line">             <span class="string">"date"</span>:    <span class="string">"2014-09-17"</span>,</span><br><span class="line">             <span class="string">"name"</span>:    <span class="string">"John Smith"</span>,</span><br><span class="line">             <span class="string">"tweet"</span>:   <span class="string">"The Query DSL is really powerful and flexible"</span>,</span><br><span class="line">             <span class="string">"user_id"</span>: <span class="number">2</span></span><br><span class="line">          &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">        ... <span class="number">9</span> RESULTS REMOVED ...</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"max_score"</span> :   <span class="number">1</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"took"</span> :           <span class="number">4</span>,</span><br><span class="line">   <span class="string">"_shards"</span> : &#123;</span><br><span class="line">      <span class="string">"failed"</span> :      <span class="number">0</span>,</span><br><span class="line">      <span class="string">"successful"</span> :  <span class="number">10</span>,</span><br><span class="line">      <span class="string">"total"</span> :       <span class="number">10</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="string">"timed_out"</span> :      <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>hits</strong></p><p>返回结果中最重要的部分是 <code>hits</code> ，它 包含 <code>total</code> 字段来表示匹配到的文档总数，并且一个 <code>hits</code> 数组包含所查询结果的前十个文档。</p><p>在 <code>hits</code> 数组中每个结果包含文档的 <code>_index</code> 、 <code>_type</code> 、 <code>_id</code> ，加上 <code>_source</code> 字段。这意味着我们可以直接从返回的搜索结果中使用整个文档。这不像其他的搜索引擎，仅仅返回文档的ID，需要你单独去获取文档。</p><p>每个结果还有一个 <code>_score</code> ，它衡量了文档与查询的匹配程度。默认情况下，首先返回最相关的文档结果，就是说，返回的文档是按照 <code>_score</code> 降序排列的。在这个例子中，我们没有指定任何查询，故所有的文档具有相同的相关性，因此对所有的结果而言 <code>1</code> 是中性的 <code>_score</code> 。</p><p><code>max_score</code> 值是与查询所匹配文档的 <code>_score</code> 的最大值。</p></li><li><p><strong>took</strong></p><p><code>took</code> 值告诉我们执行整个搜索请求耗费了多少毫秒。</p></li><li><p><strong>shards</strong></p><p><code>_shards</code> 部分 告诉我们在查询中参与分片的总数，以及这些分片成功了多少个失败了多少个。正常情况下我们不希望分片失败，但是分片失败是可能发生的。如果我们遭遇到一种灾难级别的故障，在这个故障中丢失了相同分片的原始数据和副本，那么对这个分片将没有可用副本来对搜索请求作出响应。假若这样，Elasticsearch 将报告这个分片是失败的，但是会继续返回剩余分片的结果。</p></li><li><p><strong>timeout</strong></p><p><code>timed_out</code> 值告诉我们查询是否超时。默认情况下，搜索请求不会超时。 如果低响应时间比完成结果更重要，你可以指定 <code>timeout</code> 为 10 或者 10ms（10毫秒），或者 1s（1秒）：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">GET /_search?timeout=<span class="number">10</span>ms</span><br></pre></td></tr></table></figure><p>在请求超时之前，Elasticsearch 将会返回已经成功从每个分片获取的结果。</p></li></ul><h3 id="3-5-多索引，多类型"><a href="#3-5-多索引，多类型" class="headerlink" title="3.5.多索引，多类型"></a>3.5.多索引，多类型</h3><ul><li><p>想在一个或多个特殊的索引并且在一个或者多个特殊的类型中进行搜索。我们可以通过在URL中指定特殊的索引和类型达到这种效果，如下所示：</p></li><li><p><strong><code>/_search</code></strong>：在所有的索引中搜索所有的类型</p></li><li><p><strong><code>/gb/_search</code></strong>：在 <code>gb</code> 索引中搜索所有的类型</p></li><li><p><strong><code>/gb,us/_search</code></strong>：在 <code>gb</code> 和 <code>us</code> 索引中搜索所有的文档</p></li><li><p><strong><code>/g\*,u\*/_search</code></strong>：在任何以 <code>g</code> 或者 <code>u</code> 开头的索引中搜索所有的类型</p></li><li><p><strong><code>/gb/user/_search</code></strong>：在 <code>gb</code> 索引中搜索 <code>user</code> 类型</p></li><li><p><strong><code>/gb,us/user,tweet/_search</code></strong>：在 <code>gb</code> 和 <code>us</code> 索引中搜索 <code>user</code> 和 <code>tweet</code> 类型</p></li><li><p><strong><code>/_all/user,tweet/_search</code></strong>：在所有的索引中搜索 <code>user</code> 和 <code>tweet</code> 类型</p></li></ul><h2 id="4-聚合-aggregations"><a href="#4-聚合-aggregations" class="headerlink" title="4.聚合(aggregations)"></a>4.聚合(<strong>aggregations</strong>)</h2><ul><li><p>允许你在数据上生成复杂的分析统计</p><p>举个例子，让我们找到所有职员中最大的共同点（兴趣爱好）是什么</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">GET /megacorp/employee/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"aggs"</span>: &#123;</span><br><span class="line">    <span class="string">"all_interests"</span>: &#123;</span><br><span class="line">      <span class="string">"terms"</span>: &#123; <span class="string">"field"</span>: <span class="string">"interests"</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>返回结果</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   ...</span><br><span class="line">   <span class="string">"hits"</span>: &#123; ... &#125;,</span><br><span class="line">   <span class="string">"aggregations"</span>: &#123;</span><br><span class="line">      <span class="string">"all_interests"</span>: &#123;</span><br><span class="line">         <span class="string">"buckets"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="string">"key"</span>:       <span class="string">"music"</span>,</span><br><span class="line">               <span class="string">"doc_count"</span>: <span class="number">2</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="string">"key"</span>:       <span class="string">"forestry"</span>,</span><br><span class="line">               <span class="string">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="string">"key"</span>:       <span class="string">"sports"</span>,</span><br><span class="line">               <span class="string">"doc_count"</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">         ]</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5-索引知识"><a href="#5-索引知识" class="headerlink" title="5.索引知识"></a>5.索引知识</h2><blockquote><p>其他的字段可以查阅 第9章中 链接中内容</p></blockquote><p>ElasticSearch的对象模型，跟关系型数据库模型相比：</p><ul><li><strong>索引（Index）</strong>：相当于数据库，用于定义文档类型的存储；在同一个索引中，同一个字段只能定义一个数据类型；</li><li><strong>文档类型（Type）</strong>：相当于关系表，用于描述文档中的各个字段的定义；不同的文档类型，能够存储不同的字段，服务于不同的查询请求；</li><li><strong>文档（Document）</strong>：相当于关系表的数据行，存储数据的载体，包含一个或多个存有数据的字段；<ul><li><strong>字段（Field）</strong>：文档的一个Key/Value对；</li><li><strong>词（Term）</strong>：表示文本中的一个单词；</li><li><strong>标记（Token）</strong>：表示在字段中出现的词，由该词的文本、偏移量（开始和结束）以及类型组成；</li></ul></li></ul><p>索引是由段（Segment）组成的，段存储在硬盘（Disk）文件中，段不是实时更新的，这意味着，段在写入磁盘后，就不再被更新。ElasticSearch引擎把被删除的文档的信息存储在一个单独的文件中，在搜索数据时，ElasticSearch引擎首先从段中查询，再从查询结果中过滤被删除的文档，这意味着，段中存储着“被删除”的文档，这使得段中含有”正常文档“的密度降低。多个段可以通过段合并（Segment Merge）操作把“已删除”的文档将从段中物理删除，把未删除的文档合并到一个新段中，新段中没有”已删除文档“，因此，段合并操作能够提高索引的查找速度，但段合并是IO密集型的操作，需要消耗大量的硬盘IO。</p><h3 id="5-1创建索引"><a href="#5-1创建索引" class="headerlink" title="5.1创建索引"></a>5.1创建索引</h3><p>在创建索引之前，首先了解<strong>REST</strong>ful API的调用风格，在管理和使用ElasticSearch服务时，常用的HTTP动词有下面五个：</p><ul><li><p><strong>GET 请求：获取服务器中的对象</strong></p><ul><li>相当于SQL的Select命令</li><li>GET /blogs：列出所有博客</li></ul></li><li><p>POST 请求：在服务器上更新对象</p><ul><li>相当于SQL的Update命令</li><li>POST /blogs/ID：更新指定的博客</li></ul></li><li><p><strong>PUT 请求：在服务器上创建对象</strong></p><ul><li>相当于SQL的Create命令</li><li>PUT /blogs/ID：新建一个博客　　</li></ul></li><li><p><strong>DELETE 请求：删除服务器中的对象</strong></p></li><li><ul><li>相当于SQL的Delete命令</li><li>DELETE /blogs/ID：删除指定的博客</li></ul></li><li><p><strong>HEAD 请求：仅仅用于获取对象的基础信息</strong></p></li></ul><ol><li><p><strong>禁用自动创建索引</strong></p><p>推荐设置：在全局配置文件 elasticsearch.yml 中，禁用自动创建索引：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">action.auto_create_index:false</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>手动创建索引</strong></p><p>创建索引的语法是：<code>PUT http://host:port/index_name/+index_configuration</code></p><p>其中，<strong><code>index_name</code></strong>是创建的索引的名字，<strong><code>indiex_configuration</code></strong> 是向ElasticSearch服务器传递的请求负载的主体，数据格式<strong>是json</strong>，用于定义索引的配置信息：<strong>映射节（mappings）和配置节（settings）</strong>。</p><p>在创建索引时，需要精心设计索引的映射节（mappings）和配置节（settings），本例创建<strong>blog索引和articles文档类型，</strong>创建索引的语法是：<code>PUT http://localhost:9200/blog/</code></p></li></ol><h3 id="5-2索引映射节（mappings）"><a href="#5-2索引映射节（mappings）" class="headerlink" title="5.2索引映射节（mappings）"></a>5.2索引映射节（mappings）</h3><ol><li><p><strong>索引结构</strong></p><p>索引是由文档类型构成的，在mappings字段中定义索引的文档类型，示例代码中为blog索引定义了三个文档类型：articles，followers和comments</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="attr">"mappings"</span>:&#123;  </span><br><span class="line">      <span class="attr">"articles"</span>:&#123; &#125;,</span><br><span class="line">      <span class="attr">"followers"</span>:&#123; &#125;,</span><br><span class="line">      <span class="attr">"comments"</span>:&#123; &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>文档属性</strong></p><p><strong>==文档属性定义了文档类型的共用属性，适用于文档的所有字段:==</strong></p></li></ol><ul><li><strong>dynamic_date_formats</strong>属性：该属性定义可以识别的日期格式列表；</li><li><strong>dynamic</strong>属性：默认值为true，允许动态地向文档类型中加入新的字段。推荐设置为false，禁止向文档中添加字段，这样，文档类型的所有字段必须在索引映射的properties属性中显式定义，在properties字段中未定义的字段都将会ElasticSearch忽略。<ul><li>dynamic设置为ture：默认值，新增加的字段被添加到索引映射中；</li><li>dynamic设置为false：新增加的字段会被忽略；</li><li>dynamic设置为strict：当向文档中新增字段时，ElasticSearch引擎抛出异常；</li></ul></li></ul><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="attr">"mappings"</span>:&#123;  </span><br><span class="line">      <span class="attr">"articles"</span>:&#123;  <span class="attr">"dynamic"</span>:<span class="literal">false</span>,</span><br><span class="line">         <span class="attr">"dynamic_date_formats"</span>:[<span class="string">"yyyy-MM-dd hh:mm:ss"</span>, <span class="string">"yyyy-MM-dd"</span> ],</span><br><span class="line">         <span class="attr">"properties"</span>:&#123;  </span><br><span class="line">            <span class="attr">"id"</span>:&#123;&#125;,</span><br><span class="line">            <span class="attr">"title"</span>:&#123;&#125;,</span><br><span class="line">            <span class="attr">"author"</span>:&#123;&#125;,</span><br><span class="line">            <span class="attr">"content"</span>:&#123;&#125;,</span><br><span class="line">            <span class="attr">"postedat"</span>:&#123;&#125;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-文档的字段属性"><a href="#5-3-文档的字段属性" class="headerlink" title="5.3 文档的字段属性"></a>5.3 文档的字段属性</h3><h4 id="1-字段的数据类型"><a href="#1-字段的数据类型" class="headerlink" title="1.字段的数据类型"></a>1.字段的数据类型</h4><p>字段的数据类型由字段的属性type指定，ElasticSearch支持的基础数据类型主要有：</p><ul><li><p><strong>字符串类型</strong>：string；</p></li><li><p><strong>数值类型</strong>：字节（byte）、2字节（short）、4字节（integer）、8字节（long）、float、double；</p></li><li><p><strong>布尔类型</strong>：boolean，值是true或false；</p></li><li><p><strong>时间/日期类型</strong>：date，用于存储日期和时间；</p></li><li><p><strong>二进制类型</strong>：binary；</p></li><li><p><strong>IP地址类型</strong>：ip，以字符串形式存储IPv4地址；</p></li><li><p><strong>特殊数据类型</strong>：token_count，用于存储索引的字数信息</p><p>在文档类型的properties属性中，定义字段的type属性，指定字段的数据类型，属性properties 用于定义文档类型的字段属性，或字段对象的属性：</p><figure class="highlight"><table><tr><td class="code"><pre><span class="line">"properties":&#123;  </span><br><span class="line">           "id":&#123;"type":"long"&#125;</span><br><span class="line">           &#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-字段的公共属性"><a href="#2-字段的公共属性" class="headerlink" title="2.字段的公共属性"></a>2.字段的公共属性</h4><ul><li><p><strong>index</strong>：该属性控制字段是否编入索引被搜索，该属性共有三个有效值：analyzed、no和not_analyzed：</p><ul><li><p>analyzed：表示该字段被分析，编入索引，产生的token能被搜索到；</p></li><li><p>not_analyzed：表示该字段不会被分析，使用原始值编入索引，在索引中作为单个词；</p></li><li><p>no：不编入索引，无法搜索该字段；</p><p>其中analyzed是分析，分解的意思，默认值是analyzed，表示将该字段编入索引，以供搜索。</p></li></ul></li><li><p><strong>store</strong>：指定是否将字段的原始值写入索引，默认值是no，字段值被分析，能够被搜索，但是，字段值不会存储，这意味着，该字段能够被查询，但是不会存储字段的原始值。</p></li><li><p><strong>boost</strong>：字段级别的助推，默认值是1，定义了字段在文档中的重要性/权重；</p></li><li><p><strong>include_in_all</strong>：该属性指定当前字段是否包括在_all字段中，默认值是ture，所有的字段都会包含_all字段中；如果index=no，那么属性include_in_all无效，这意味着当前字段无法包含在_all字段中。</p></li><li><p><strong>copy_to</strong>：该属性指定一个字段名称，ElasticSearch引擎将当前字段的值复制到该属性指定的字段中；</p></li><li><p><strong>doc_values</strong>：文档值是存储在硬盘上的索引时（indexing time）数据结构，对于not_analyzed字段，默认值是true，analyzed string字段不支持文档值;</p></li><li><p><strong>fielddata</strong>：字段数据是存储在内存中的查询时（querying time）数据结构，只支持analyzed string字段；</p></li><li><p><strong>null_value</strong>：该属性指定一个值，当字段的值为NULL时，该字段使用null_value代替NULL值；在ElasticSearch中，NULL 值不能被索引和搜索，当一个字段设置为NULL值，ElasticSearch引擎认为该字段没有任何值，使用该属性为NULL字段设置一个指定的值，使该字段能够被索引和搜索。</p></li></ul><h4 id="3-字符串类型常用的其他属性"><a href="#3-字符串类型常用的其他属性" class="headerlink" title="3.字符串类型常用的其他属性"></a>3.字符串类型常用的其他属性</h4><ul><li><strong>analyzer</strong>：该属性定义用于建立索引和搜索的分析器名称，默认值是全局定义的分析器名称，该属性可以引用在配置结点（settings）中自定义的分析器；</li><li><strong>search_analyzer</strong>：该属性定义的分析器，用于处理发送到特定字段的查询字符串；</li><li><strong>ignore_above</strong>：该属性指定一个整数值，当字符串字段（analyzed string field）的字节数量大于该数值之后，超过长度的部分字符数据将不能被analyzer处理，不能被编入索引；对于 not analyzed string字段，超过长度的部分字符将被忽略，不会被编入索引。默认值是0，禁用该属性；</li><li><strong>position_increment_gap</strong>：该属性指定在相同词的位置上增加的gap，默认值是100；</li><li><strong>index_options</strong>：索引选项控制添加到倒排索引（Inverted Index）的信息，这些信息用于搜索（Search）和高亮显示：<ul><li>docs：只索引文档编号(Doc Number)</li><li>freqs：索引文档编号和词频率（term frequency）</li><li>positions：索引文档编号，词频率和词位置（序号）</li><li>offsets：索引文档编号，词频率，词偏移量（开始和结束位置）和词位置（序号）</li><li>默认情况下，被分析的字符串（analyzed string）字段使用positions，其他字段使用docs; </li></ul></li></ul><p>分析器（analyzer）把analyzed string 字段的值，转换成标记流（Token stream），例如，字符串”The quick Brown Foxes”，可能被分解成的标记（Token）是：quick,brown,fox。这些词（term）是该字段的索引值，这使用对索引文本的查找更有效率。字段的属性 analyzer 用于指定在index-time和search-time时，ElasticSearch引擎分解字段值的分析器名称。</p><h4 id="4-数值类型的其他属性"><a href="#4-数值类型的其他属性" class="headerlink" title="4.数值类型的其他属性"></a>4.数值类型的其他属性</h4><ul><li><strong>precision_step</strong>：该属性指定为数值字段每个值生成的term数量，值越低，产生的term数量越高，范围查询越快，索引越大，默认值是4；</li><li><strong>ignore_malformed</strong>：忽略格式错误的数值，默认值是false，不忽略错误格式，对整个文档不处理，并且抛出异常；</li><li><strong>coerce</strong>：默认值是true，尝试将字符串转换为数值，如果字段类型是整数，那么将小数取整；</li></ul><h4 id="5-日期类型的其他属性"><a href="#5-日期类型的其他属性" class="headerlink" title="5.日期类型的其他属性"></a>5.日期类型的其他属性</h4><ul><li><strong>format</strong>：指定日期的格式，例如：“yyyy-MM-dd hh:mm:ss”</li><li><strong>precision_step</strong>：该属性指定数值字段每隔多少数值，生成一个词（term）；step值越低，产生的词数量越高，范围查询越快，索引越大，占用存储空间越大；</li><li><strong>ignore_malformed</strong>：忽略错误格式，默认值是false，不忽略错误格式；</li></ul><h4 id="6-多字段（fields）"><a href="#6-多字段（fields）" class="headerlink" title="6.多字段（fields）"></a>6.多字段（fields）</h4><p>在fields属性中定义一个或多个字段，该字段的值和当前字段值相同，可以设置一个字段用于搜索，一个字段用于排序等。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;properties&quot;:</span><br><span class="line">&#123;  </span><br><span class="line">    &quot;id&quot;:&#123;  &quot;type&quot;:&quot;long&quot;,</span><br><span class="line">         &quot;fields&quot;:&#123;  &quot;id2&quot;:&#123;&quot;type&quot;:&quot;long&quot;,&quot;index&quot;:&quot;not_analyzed&quot;&#125; &#125;</span><br><span class="line">      &#125;,</span><br></pre></td></tr></table></figure><h4 id="7-文档值（doc-values）"><a href="#7-文档值（doc-values）" class="headerlink" title="7.文档值（doc_values）"></a>7.文档值（doc_values）</h4><p>默认情况下，多数字段都被一起编入索引，用户使用倒排索引（Inverted Index）可以搜索到相应的词（Term），倒排索引支持在唯一的有序词列表中查找特定词，或检查文档中是否包含某个词，但是，对于排序（Sort），聚合和在脚本中访问特定字段的值（Field value)，这三个操作需要执行不同的数据访问模式，即单字段数据访问：在文档中查找特定的字段，检查该字段是否包含指定的词。</p><p>文档值（doc_values）属性指定将字段的值写入到<strong>硬盘上</strong>的列式结构，实现了单个字段的数据访问模式，能够高效执行排序和聚合搜索。使用文档值的字段将有专属的字段数据缓存实例，无需像普通字段一样倒排。是存储在硬盘上的数据结构，在文档索引时创建。文档值数据存在硬盘上，在<strong>文档索引时</strong>创建，存储的数据和字段存储在_source 字段的数据相同，文档值支持所有的字段类型，除了analyzed string 字段之外。</p><p>默认情况下，所有的字段都支持文档值，默认是启用的（enabled），如果不需要在单个字段上执行排序或聚合操作，或者从脚本中访问指定字段的值，那么，可以禁用文档值，字段的值将不会存储在硬盘空间中。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"properties"</span>: &#123;</span><br><span class="line">    <span class="string">"status_code"</span>: &#123; </span><br><span class="line">        <span class="string">"type"</span>:       <span class="string">"string"</span>,</span><br><span class="line">        <span class="string">"index"</span>:      <span class="string">"not_analyzed"</span></span><br><span class="line">        <span class="string">"doc_values"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"session_id"</span>: &#123; </span><br><span class="line">        <span class="string">"type"</span>:       <span class="string">"string"</span>,</span><br><span class="line">        <span class="string">"index"</span>:      <span class="string">"not_analyzed"</span>,</span><br><span class="line">        <span class="string">"doc_values"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-字段数据（Fielddata）"><a href="#8-字段数据（Fielddata）" class="headerlink" title="8.字段数据（Fielddata）"></a>8.字段数据（Fielddata）</h4><p>字段数据（Fielddata）是存储在内存中的查询时数据结构，只支持analyzed string字段。该数据结构在字段第一次执行聚合，排序或被脚本访问时创建。创建的过程是：在读取整个倒排索引（Inverted Index）时，ElasticSearch从硬盘上加载倒排索引的每个段（Segment），倒转词（Term）和文档的关系，并将其存储在JVM堆内存中。加载字段数据的过程是非常消耗IO资源的，一旦被加载，就被存储在内存中，直到段的生命周期结束。</p><p>对于analyzed string字段，fielddata字段是默认启用的，</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"text"</span>:&#123;  </span><br><span class="line">   <span class="string">"type"</span>:<span class="string">"string"</span>,</span><br><span class="line">   <span class="string">"fielddata"</span>:&#123;  <span class="string">"loading"</span>:<span class="string">"lazy"</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-存储（store）"><a href="#9-存储（store）" class="headerlink" title="9.存储（store）"></a>9.存储（store）</h4><p>存储（store）属性指定是否将字段的原始值写入索引，默认值是no，字段值被分析，能够被搜索，但是，字段的原始值不会存储，这意味着，该字段能够被查询，但是无法获取字段的原始值。默认情况下，该字段的值会被存储到_source字段中，如果想要获取单个或多个字段的值，而不是整个_source字段，可以使用 <a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/search-request-source-filtering.html" target="_blank" rel="noopener">source filtering</a> 来实现；但是在特定的条件下，只存储一个字段的值是有意义的（make sense），例如，一个article文档包含：title，postdate和content字段，从文档中只获取title和postdate字段，并且使_source 字段包含content字段，必须通过store属性来控制：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"mappings"</span>: &#123;</span><br><span class="line">    <span class="string">"my_type"</span>: &#123;</span><br><span class="line">      <span class="string">"properties"</span>: &#123;</span><br><span class="line">        <span class="string">"title"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="string">"store"</span>: <span class="literal">true</span> </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"date"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"date"</span>,</span><br><span class="line">          <span class="string">"store"</span>: <span class="literal">true</span> </span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"content"</span>: &#123;</span><br><span class="line">          <span class="string">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">          <span class="string">"store"</span>: <span class="literal">false</span>   </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="10-位置增加间隔（position-increment-gap）"><a href="#10-位置增加间隔（position-increment-gap）" class="headerlink" title="10.位置增加间隔（position_increment_gap）"></a>10.位置增加间隔（position_increment_gap）</h4><p>对于analyzed string字段，都会考虑把词的位置信息，用于支持位置和短语匹配查询（<a href="https://www.elastic.co/guide/en/elasticsearch/reference/2.4/query-dsl-match-query.html#query-dsl-match-query-phrase" target="_blank" rel="noopener">proximity or phrase queries</a>），例如，有一个字符串字段，该字段中存在多个词“fake”，ElasticSearch引擎会在每个值之间增加一个gap，以防止短语匹配或位置匹配查询出现跨越多个词的异常，这个gap的值就是属性position_increment_gap，默认值是100；</p><h3 id="5-4-元字段"><a href="#5-4-元字段" class="headerlink" title="5.4 元字段"></a>5.4 元字段</h3><p>在索引的映射中，元字段（Meta-field）是以下划线开头的字段，部分元字段可以配置，部分元字段不可配置，只能用于返回信息。</p><h4 id="1-all-字段，可以配置"><a href="#1-all-字段，可以配置" class="headerlink" title="1._all 字段，可以配置"></a>1._all 字段，可以配置</h4><p>ElasticSearch使用_all字段存储其他字段的数据以便搜索，默认情况下，_all字段是启用的，包含了索引中所有字段的数据，然而这一字段使索引变大，如果不需要，请禁用该字段，或排除某些字段。为了在_all字段中不包括某个特定字段，在字段中设置“include_in_all”属性为false。</p><p>禁用_all字段，需要修改映射配置：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="string">"articles"</span>:&#123;  <span class="string">"_all"</span>:&#123;  </span><br><span class="line">         <span class="string">"enabled"</span>:<span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-source-字段，可以配置"><a href="#2-source-字段，可以配置" class="headerlink" title="2._source 字段，可以配置"></a>2._source 字段，可以配置</h4><p>_source字段表示在生成索引的过程中，存储发送到ElasticSearch的原始JSON文档，默认情况下，该字段会被启用，因为索引的局部更新功能依赖该字段。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="string">"articles"</span>:&#123;  </span><br><span class="line">      <span class="string">"_source"</span>:&#123;  </span><br><span class="line">         <span class="string">"enabled"</span>:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;  </span><br><span class="line">   <span class="string">"articles"</span>:&#123;  </span><br><span class="line">      <span class="string">"_source"</span>:&#123;  </span><br><span class="line">         <span class="string">"excludes"</span>:[<span class="string">"Content"</span>,<span class="string">"Comments"</span>],</span><br><span class="line">         <span class="string">"includes"</span>:[<span class="string">"author"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-routing-字段，可以配置"><a href="#3-routing-字段，可以配置" class="headerlink" title="3._routing 字段，可以配置"></a>3._routing 字段，可以配置</h4><p>路由字段，将一个文档值进行哈希映射，并将该文档路由到指定的分片，路由的公式是：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">shard_num = hash(_routing) % num_primary_shards</span><br></pre></td></tr></table></figure><p>在ElasticSearch 2.4 版本中，path参数被废弃，使用的默认字段是_id，设置required为true，表示路由字段在进行索引的CRUD操作时必需显式赋值。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">   <span class="string">"articles"</span>:&#123;  </span><br><span class="line">      <span class="string">"_routing"</span>:&#123;  </span><br><span class="line">         <span class="string">"required"</span>:<span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在put 命令中，使用自定义的路由字段，以下示例使用 user1字段作为路由字段更新和查询文档：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">PUT my_index/my_type/<span class="number">1</span>?routing=user1 </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"This is a document"</span></span><br><span class="line">&#125;</span><br><span class="line">GET my_index/my_type/<span class="number">1</span>?routing=user1</span><br></pre></td></tr></table></figure><h4 id="4-不可配置的元字段"><a href="#4-不可配置的元字段" class="headerlink" title="4.不可配置的元字段"></a>4.不可配置的元字段</h4><ul><li><code>_index</code>：返回文档所属的索引</li><li><code>_uid</code>：返回文档的type和id</li><li><code>_type</code>：返回文档类型（type）</li><li><code>_id</code>：返回文档的ID；</li><li><code>_size</code>：返回文档的_source字段中函数的字节数量；</li><li><code>_field_names</code>：返回文档中不包含null值的字段名称；</li></ul><h3 id="5-5索引配置节（settings）"><a href="#5-5索引配置节（settings）" class="headerlink" title="5.5索引配置节（settings）"></a>5.5索引配置节（settings）</h3><h4 id="1-配置索引的分片和副本数量"><a href="#1-配置索引的分片和副本数量" class="headerlink" title="1.配置索引的分片和副本数量"></a>1.配置索引的分片和副本数量</h4><p>ElasticSearch索引是有一个或多个分片组成的，每个分片是索引的一个水平分区，包含了文档数据的一部分；每个分片有0，1或多个副本，分片的副本和分片存储相同的数据。</p><p>示例代码，为索引创建5个分片，分片没有副本：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"settings"</span>:&#123;</span><br><span class="line">    <span class="string">"number_of_shards"</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="string">"number_of_replicas"</span>:<span class="number">0</span>,</span><br></pre></td></tr></table></figure><h4 id="2-配置分析器（analyzer）"><a href="#2-配置分析器（analyzer）" class="headerlink" title="2.配置分析器（analyzer）"></a>2.配置分析器（analyzer）</h4><p>在配置结点的analysis属性中配置分析器，参考<a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/analysis.html" target="_blank" rel="noopener">官方文档</a>了解更多，</p><p><strong>分词器（tokenizer）是系统预定义的，常用的分词器是：</strong></p><ul><li>standard：默认值，用于大多数欧洲语言的标准分词器</li><li>simple：基于非字母字符来分词，并将其转化为小写形式</li><li>whitespace：基于空格来分词</li><li>stop：除了simple的所有功能，还能基于停用词（stop words）过滤数据；</li><li>pattern：使用正则表达式分词；</li><li>snowball：除了standard提供的分词功能之外，还提供词干提取功能；</li></ul><p><strong>过滤器是系统预定义的，常用的过滤器是:</strong></p><ul><li>asciifolding</li><li>lowercase</li><li>kstem</li></ul><h2 id="6-ElasticSearch-High-Level-REST-文档基本操作"><a href="#6-ElasticSearch-High-Level-REST-文档基本操作" class="headerlink" title="6.ElasticSearch High Level REST  文档基本操作"></a>6.ElasticSearch High Level REST  文档基本操作</h2><blockquote><p>indexRequest：索引请求</p><p>GetRequest：获取请求</p><p>DeleteRequest：删除请求</p><p>UpdateRequest：更新请求</p><p>BulkRequest：容量请求，用来装上述所有请求</p></blockquote><h3 id="6-1-坐标依赖"><a href="#6-1-坐标依赖" class="headerlink" title="6.1 坐标依赖"></a>6.1 坐标依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>elastic-lucene-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Elastic Lucene Snapshots<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://s3.amazonaws.com/download.elasticsearch.org/lucenesnapshots/00142c9<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-2-创建客户端"><a href="#6-2-创建客户端" class="headerlink" title="6.2 创建客户端"></a>6.2 创建客户端</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"10.1.59.101"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port = <span class="number">9200</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Rest高级客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestHighLevelClient <span class="title">getRestHighLevelClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestClientBuilder builder = RestClient.builder(<span class="keyword">new</span> HttpHost(host, port));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestHighLevelClient(builder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Rest低级客户端</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestClient <span class="title">getRestClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RestClient build = RestClient.builder(<span class="keyword">new</span> HttpHost(host)).build();</span><br><span class="line">        <span class="keyword">return</span> build;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-索引操作"><a href="#6-3-索引操作" class="headerlink" title="6.3 索引操作"></a>6.3 索引操作</h3><p>索引即我们的新增操作，ES提供了三种形式的索引，分别为通过<em>Json字符串、Map集合、XContentBuilder实</em>现索引操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">        <span class="comment">//Json字符串作为数据源</span></span><br><span class="line">        IndexRequest indexRequest1 = <span class="keyword">new</span> IndexRequest(<span class="string">"02"</span>,book<span class="string">","</span><span class="number">3</span><span class="string">");</span></span><br><span class="line"><span class="string">        String jsonString = "</span>&#123;<span class="string">" +</span></span><br><span class="line"><span class="string">                "</span>\<span class="string">"name\":\"生命的诞生\","</span> +</span><br><span class="line">                <span class="string">"\"type\":\"科学\","</span> +</span><br><span class="line">                <span class="string">"\"price\":\"170\""</span> +</span><br><span class="line">                <span class="string">"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">        indexRequest1.source(jsonString, XContentType.JSON);</span><br><span class="line">                                                      </span><br><span class="line">        <span class="comment">//Map集合作为数据源</span></span><br><span class="line">        Map jsonMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        jsonMap.put(<span class="string">"user"</span>, <span class="string">"userByMap"</span>);</span><br><span class="line">        jsonMap.put(<span class="string">"postDate"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">        jsonMap.put(<span class="string">"message"</span>, <span class="string">"messageByMap"</span>);</span><br><span class="line">        IndexRequest indexRequest2 = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"34"</span>).source(jsonMap);</span><br><span class="line">                                                      </span><br><span class="line">        <span class="comment">//XContentBuilder作为数据源</span></span><br><span class="line">        XContentBuilder builder = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            builder = XContentFactory.jsonBuilder();</span><br><span class="line">            builder.startObject();</span><br><span class="line">            builder.field(<span class="string">"user"</span>, <span class="string">"userXXX"</span>);</span><br><span class="line">            builder.timeField(<span class="string">"postDate"</span>, <span class="keyword">new</span> Date());</span><br><span class="line">            builder.field(<span class="string">"message"</span>, <span class="string">"messageXXX"</span>);</span><br><span class="line">            builder.endObject();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        IndexRequest indexRequest3 = <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"1"</span>)</span><br><span class="line">                .source(builder);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            IndexResponse indexResponse1 = client.index(indexRequest1, RequestOptions.DEFAULT);</span><br><span class="line">            client.index(indexRequest2, RequestOptions.DEFAULT);</span><br><span class="line">            client.index(indexRequest3, RequestOptions.DEFAULT);</span><br><span class="line">            client.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-获取操作"><a href="#6-4-获取操作" class="headerlink" title="6.4 获取操作"></a>6.4 获取操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"posts"</span>,<span class="string">"doc"</span>,<span class="string">"1"</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        GetResponse getResponse = client.get(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-删除操作"><a href="#6-5-删除操作" class="headerlink" title="6.5 删除操作"></a>6.5 删除操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    <span class="comment">//获取删除请求</span></span><br><span class="line">DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(<span class="string">"02"</span>, <span class="string">"book"</span>, <span class="string">"2"</span>);</span><br><span class="line">    deleteRequest.timeout(TimeValue.timeValueMinutes(<span class="number">10</span>));</span><br><span class="line">    deleteRequest.setRefreshPolicy(WriteRequest.RefreshPolicy.WAIT_UNTIL);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        client.delete(deleteRequest, RequestOptions.DEFAULT);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-6-更新"><a href="#6-6-更新" class="headerlink" title="6.6 更新"></a>6.6 更新</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    <span class="comment">//获取更新请求</span></span><br><span class="line">    UpdateRequest updateRequest = <span class="keyword">new</span> UpdateRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"35"</span>);</span><br><span class="line">    Map map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"message"</span>, <span class="string">"message_update"</span>);</span><br><span class="line">    map.put(<span class="string">"user"</span>, <span class="string">"user_update"</span>);</span><br><span class="line">    updateRequest.doc(user.toJsonString(), XContentType.JSON);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        client.update(updateRequest, RequestOptions.DEFAULT);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-查询文档是否存在"><a href="#6-7-查询文档是否存在" class="headerlink" title="6.7 查询文档是否存在"></a>6.7 查询文档是否存在</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exists</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    GetRequest getRequest = <span class="keyword">new</span> GetRequest(<span class="string">"posts"</span>,<span class="string">"doc"</span>,<span class="string">"33"</span>);</span><br><span class="line">    GetResponse getResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        getRequest.fetchSourceContext(<span class="keyword">new</span> FetchSourceContext(<span class="keyword">false</span>));<span class="comment">//禁用获取 _source字段</span></span><br><span class="line">        getRequest.storedFields(<span class="string">"_none_"</span>);<span class="comment">//禁用获取存储字段。</span></span><br><span class="line">        <span class="comment">//这里获取文档存在的状态</span></span><br><span class="line">        <span class="keyword">boolean</span> exists = client.exists(getRequest, RequestOptions.DEFAULT);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-8-Bulk批量操作"><a href="#6-8-Bulk批量操作" class="headerlink" title="6.8 Bulk批量操作"></a>6.8 Bulk批量操作</h3><ul><li><strong>BulkRequest</strong>：  批量请求（用于增删改操作）</li><li><strong>BulkResponse</strong>：批量请求（用于增删改操作）</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bulk</span><span class="params">(User user)</span></span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    User user2 = <span class="keyword">new</span> User();</span><br><span class="line">    user2.setName(<span class="string">"周大福"</span>);</span><br><span class="line">    user2.setAge(<span class="number">211</span>);</span><br><span class="line">    user2.setPosition(<span class="string">"珠宝"</span>);</span><br><span class="line">    <span class="comment">//批量请求（用于增删改操作）</span></span><br><span class="line">    BulkRequest bulkRequest = <span class="keyword">new</span> BulkRequest();</span><br><span class="line">    <span class="comment">//多种请求</span></span><br><span class="line">    IndexRequest indexRequest1 = </span><br><span class="line">        <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"41"</span>).source(user.toJsonString(), XContentType.JSON);</span><br><span class="line">    IndexRequest indexRequest2 = </span><br><span class="line">        <span class="keyword">new</span> IndexRequest(<span class="string">"posts"</span>, <span class="string">"doc"</span>, <span class="string">"42"</span>).source(user2.toJsonString(), XContentType.JSON);</span><br><span class="line">    DeleteRequest deleteRequest = <span class="keyword">new</span> DeleteRequest(<span class="string">"01"</span>, <span class="string">"law"</span>, <span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">    bulkRequest.add(indexRequest1);</span><br><span class="line">    bulkRequest.add(indexRequest2);</span><br><span class="line">    bulkRequest.add(deleteRequest);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        client.bulk(bulkRequest, RequestOptions.DEFAULT);</span><br><span class="line">        client.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-ElasticSearch-High-Level-REST-搜索查询"><a href="#7-ElasticSearch-High-Level-REST-搜索查询" class="headerlink" title="7.ElasticSearch High Level REST 搜索查询"></a>7.ElasticSearch High Level REST 搜索查询</h2><h3 id="7-1创建查询请求"><a href="#7-1创建查询请求" class="headerlink" title="7.1创建查询请求"></a>7.1创建查询请求</h3><p>在search搜索中大部分的搜索条件添加都可通过设置SearchSourceBuilder来实现，然后将SearchSourceBuilder</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RestHighLevelClient client = ElasticClient.getRestHighLevelClient();</span><br><span class="line"><span class="comment">//创建查询体</span></span><br><span class="line">SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">sourceBuilder.query(QueryBuilders.termQuery(<span class="string">"user"</span>, <span class="string">"kimchy"</span>));</span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line">sourceBuilder.from(<span class="number">0</span>);</span><br><span class="line">sourceBuilder.size(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//设置一个可选的超时，控制允许搜索的时间</span></span><br><span class="line">sourceBuilder.timeout(<span class="keyword">new</span> TimeValue(<span class="number">60</span>, TimeUnit.SECONDS)); </span><br><span class="line"><span class="comment">//获取搜索请求</span></span><br><span class="line">searchRequest.source(sourceBuilder);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//执行请求</span></span><br><span class="line">    SearchResponse search = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">//获取匹配的总数量</span></span><br><span class="line">    Long total = search.getHits().getTotalHits(); </span><br><span class="line">    System.out.println(<span class="string">"总记录数："</span> + total);</span><br><span class="line">    <span class="keyword">for</span> (SearchHit hit : search.getHits().getHits()) &#123;</span><br><span class="line">        <span class="comment">//获得分数，即匹配度 </span></span><br><span class="line">              <span class="keyword">float</span> score = hit.getScore(); </span><br><span class="line">          String source = hit.getSourceAsString();</span><br><span class="line">          System.out.println(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>search查询的返回值为SearchResponse</strong>，调用SearchResponse的<code>getHits()</code>方法会获取SearchHits对象，然后再通过SearchHits的getHits()方法即返回一个SearchHit[]数组。</p></li><li><p>遍历SearchHit[]数组获取每一个对象，通过hit.getScore()可获取分数，即搜索匹配度。通过hit.getSourceAsString()可得到对象的json字符串。</p><blockquote><p><strong>备注：</strong>在上述查询中用到了termQuery查询，ES还提供了matchQuery查询，不同的查询需求中需要选择不同的查询，在此需要了解这两个查询的区别：</p><ul><li><strong>termQuery</strong> : term为不使用分词器查找，类似精确查找。</li><li><strong>matchQuery</strong> : mactch为使用分词器进行查找，会查询到一些近似匹配的内容。</li></ul></blockquote></li></ul><h3 id="7-1-SearchHit使用汇总"><a href="#7-1-SearchHit使用汇总" class="headerlink" title="7.1 SearchHit使用汇总"></a>7.1 SearchHit使用汇总</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SearchHits hits = searchResponse.getHits();</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询命中总数</span></span><br><span class="line"><span class="keyword">long</span> totalHits = hits.getTotalHits(); </span><br><span class="line"><span class="comment">//查询命中的最高分数</span></span><br><span class="line"><span class="keyword">float</span> maxScore = hits.getMaxScore();</span><br><span class="line"></span><br><span class="line"><span class="comment">//嵌套在SearchHits可以迭代获取单个搜索结果中</span></span><br><span class="line">SearchHit[] searchHits = hits.getHits();</span><br><span class="line"><span class="keyword">for</span> (SearchHit hit : searchHits) &#123;</span><br><span class="line">    <span class="comment">//使用SearchHit做一些事情</span></span><br><span class="line">    <span class="comment">//hit就是 文档内容</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过SearchHit还可以获取 返回数据 的索引、类型、docId和得分等基本信息</span></span><br><span class="line">String index = hit.getIndex(); </span><br><span class="line">String type = hit.getType();</span><br><span class="line">String id = hit.getId();</span><br><span class="line"><span class="keyword">float</span> score = hit.getScore();</span><br><span class="line"></span><br><span class="line"><span class="comment">//hit还可以以Json字符串或Map的形式返回数据</span></span><br><span class="line">String sourceAsString = hit.getSourceAsString();</span><br><span class="line">Map&lt;String, Object&gt; sourceAsMap = hit.getSourceAsMap();</span><br><span class="line">String documentTitle = (String) sourceAsMap.get(<span class="string">"title"</span>);</span><br><span class="line">List&lt;Object&gt; users = (List&lt;Object&gt;) sourceAsMap.get(<span class="string">"user"</span>);</span><br><span class="line">Map&lt;String, Object&gt; innerObject = (Map&lt;String, Object&gt;) sourceAsMap.get(<span class="string">"innerObject"</span>);</span><br></pre></td></tr></table></figure><p><strong>在Elasticsearch中 hit内容比对</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"hits"</span> : [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"_index"</span> : <span class="string">"sku"</span>,</span><br><span class="line">        <span class="string">"_type"</span> : <span class="string">"doc"</span>,</span><br><span class="line">        <span class="string">"_id"</span> : <span class="string">"Tty-0WsB2H3IH4AiYGNu"</span>,</span><br><span class="line">        <span class="string">"_score"</span> : <span class="number">5.676614</span>,</span><br><span class="line">        <span class="string">"_source"</span> : &#123;</span><br><span class="line">            <span class="string">"brandName"</span> : <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"num"</span> : <span class="number">10000</span>,</span><br><span class="line">            <span class="string">"weight"</span> : <span class="number">10</span>,</span><br><span class="line">            <span class="string">"updateTime"</span> : <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"saleNum"</span> : <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"categoryName"</span> : <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"id"</span> : <span class="string">"34598992560"</span>,</span><br><span class="line">            <span class="string">"sn"</span> : <span class="string">""</span>,</span><br><span class="line">            <span class="string">"categoryId"</span> : <span class="literal">null</span>,</span><br><span class="line">            <span class="string">"status"</span> : <span class="string">"1"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ……</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>_index：索引</li><li>_type：类型</li><li>_id：唯一标识</li><li>_score：匹配分数</li><li>_source：数据内容</li></ul><h3 id="7-2-指定排序"><a href="#7-2-指定排序" class="headerlink" title="7.2 指定排序"></a>7.2 指定排序</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sourceBuilder.sort(<span class="keyword">new</span> ScoreSortBuilder().order(SortOrder.DESC)); <span class="comment">//按分数（即匹配度）排序</span></span><br><span class="line">sourceBuilder.sort(<span class="keyword">new</span> FieldSortBuilder(<span class="string">"_uid"</span>).order(SortOrder.ASC)); <span class="comment">//通过指定字段来排序</span></span><br></pre></td></tr></table></figure><p>排序有两种排序方式，第一通过ScoreSortBuilder实现按分数（即匹配度）排序</p><p>第二种方式通过指定字段来排序，如上图所示通过“_uid”字段排序</p><h3 id="7-3-关闭检索"><a href="#7-3-关闭检索" class="headerlink" title="7.3 关闭检索"></a>7.3 关闭检索</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sourceBuilder.fetchSource(<span class="keyword">false</span>);</span><br></pre></td></tr></table></figure><p>只返回了总记录数，遍历输出每条数据均为 null</p><p>另外还可以通过sourceBuilder接受一个或多个数组，来控制要要返回哪些字段，排除哪些字段。具体实现如下，第一个数组参数为要接受的字段，第二个数组参数为要排除的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] includeFields = <span class="keyword">new</span> String[] &#123;<span class="string">"title"</span>, <span class="string">"user"</span>, <span class="string">"innerObject.*"</span>&#125;;</span><br><span class="line">String[] excludeFields = <span class="keyword">new</span> String[] &#123;<span class="string">"_type"</span>&#125;;</span><br><span class="line">sourceBuilder.fetchSource(includeFields, excludeFields);</span><br></pre></td></tr></table></figure><h3 id="7-4-高亮显示"><a href="#7-4-高亮显示" class="headerlink" title="7.4 高亮显示"></a>7.4 高亮显示</h3><p>通过向SearchSourceBuilder添加HighlightBuilder示例可添加高亮显示功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"><span class="comment">//高亮显示构造器</span></span><br><span class="line">HighlightBuilder highlightBuilder = <span class="keyword">new</span> HighlightBuilder(); </span><br><span class="line"><span class="comment">//Field：定义高亮的范围，在hit中的 title内容中</span></span><br><span class="line">HighlightBuilder.Field highlightTitle = <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"title"</span>); </span><br><span class="line"><span class="comment">//可以自定义高亮样式</span></span><br><span class="line"><span class="comment">//highlightTitle.preTags("&lt;font style='color:red'&gt;").postTags("&lt;/font&gt;");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字段高亮显示类型，默认用标签包裹高亮字词</span></span><br><span class="line">highlightTitle.highlighterType(<span class="string">"unified"</span>); </span><br><span class="line">highlightBuilder.field(highlightTitle);</span><br><span class="line">searchSourceBuilder.highlighter(highlightBuilder);</span><br></pre></td></tr></table></figure><p>通过SearchHit的<strong>getHighlightFields()</strong>方法获取我们需要高亮内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SearchHits hits = searchResponse.getHits();</span><br><span class="line"><span class="keyword">for</span> (SearchHit hit : hits.getHits()) &#123;</span><br><span class="line">    Map highlightFields = hit.getHighlightFields();</span><br><span class="line">    HighlightField highlight = highlightFields.get(<span class="string">"title"</span>); </span><br><span class="line">    Text[] fragments = highlight.fragments();  </span><br><span class="line">    String fragmentString = fragments[<span class="number">0</span>].string();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-5-聚合-分组-操作"><a href="#7-5-聚合-分组-操作" class="headerlink" title="7.5 聚合(分组)操作"></a>7.5 聚合(分组)操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">aggregation</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//若不加keyword,在text类型上进行聚合操作时会报错</span></span><br><span class="line">    TermsAggregationBuilder aggregation = AggregationBuilders.terms(<span class="string">"by_sex"</span>).field(<span class="string">"sex.keyword"</span>);   </span><br><span class="line">    <span class="comment">//avg_age 为子聚合名称，名称可随意</span></span><br><span class="line">    aggregation.subAggregation(AggregationBuilders.avg(<span class="string">"avg_age"</span>).field(<span class="string">"age"</span>));  </span><br><span class="line">    </span><br><span class="line">    searchSourceBuilder.aggregation(aggregation);</span><br><span class="line">    searchRequest.source(searchSourceBuilder);</span><br><span class="line">    SearchResponse searchResponse = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取到聚合查询后的内容</span></span><br><span class="line">    Aggregations aggregations = searchResponse.getAggregations();</span><br><span class="line">    Terms byCompanyAggregation = aggregations.get(<span class="string">"by_sex"</span>);</span><br><span class="line">    Terms.Bucket elasticBucket = byCompanyAggregation.getBucketByKey(<span class="string">"女性"</span>);</span><br><span class="line">    Avg averageAge = elasticBucket.getAggregations().get(<span class="string">"avg_age"</span>);</span><br><span class="line">    <span class="keyword">double</span> avg = averageAge.getValue();</span><br><span class="line">    System.out.println(<span class="string">"女性平均年龄："</span>+avg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-6-匹配查询"><a href="#7-6-匹配查询" class="headerlink" title="7.6 匹配查询"></a>7.6 匹配查询</h3><blockquote><p><strong>SearchRequest</strong>： 查询请求对象</p><p><strong>SearchResponse</strong>：查询响应对象</p><p><strong>SearchSourceBuilder</strong>：查询源构建器</p><p><strong>MatchQueryBuilder</strong>：匹配查询构建器</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.连接rest接口</span></span><br><span class="line">HttpHost http=<span class="keyword">new</span> HttpHost(<span class="string">"127.0.0.1"</span>,<span class="number">9200</span>,<span class="string">"http"</span>);</span><br><span class="line">RestClientBuilder builder= RestClient.builder(http);<span class="comment">//rest构建器</span></span><br><span class="line">RestHighLevelClient restHighLevelClient=<span class="keyword">new</span> RestHighLevelClient(builder);<span class="comment">//高级客户端对象 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.封装查询请求</span></span><br><span class="line">SearchRequest searchRequest=<span class="keyword">new</span> SearchRequest(<span class="string">"sku"</span>); <span class="comment">//查询的索引值</span></span><br><span class="line">searchRequest.types(<span class="string">"doc"</span>); <span class="comment">//设置查询的类型</span></span><br><span class="line"><span class="comment">//定义查询的条件</span></span><br><span class="line">SearchSourceBuilder searchSourceBuilder=<span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">MatchQueryBuilder matchQueryBuilder= QueryBuilders.matchQuery(<span class="string">"name"</span>,<span class="string">"手机"</span>);</span><br><span class="line">searchSourceBuilder.query(matchQueryBuilder);</span><br><span class="line">searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3.获取查询结果</span></span><br><span class="line">SearchResponse searchResponse = restHighLevelClient.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">SearchHits searchHits = searchResponse.getHits();</span><br><span class="line"><span class="comment">//获取记录数</span></span><br><span class="line"><span class="keyword">long</span> totalHits = searchHits.getTotalHits();</span><br><span class="line">System.out.println(<span class="string">"记录数："</span>+totalHits);</span><br><span class="line"><span class="comment">//获取到搜索结果总览对象hits</span></span><br><span class="line">SearchHit[] hits = searchHits.getHits();</span><br><span class="line"><span class="keyword">for</span>(SearchHit hit:hits)&#123;</span><br><span class="line">    <span class="comment">//文档的源数据source</span></span><br><span class="line">String source = hit.getSourceAsString();</span><br><span class="line">System.out.println(source);</span><br><span class="line">&#125;</span><br><span class="line">restHighLevelClient.close();</span><br></pre></td></tr></table></figure><h3 id="7-7-布尔与词条查询"><a href="#7-7-布尔与词条查询" class="headerlink" title="7.7 布尔与词条查询"></a>7.7 布尔与词条查询</h3><blockquote><p><strong>BoolQueryBuilder</strong>：布尔查询构建器</p><p><strong>TermQueryBuilder</strong>：词条查询构建器</p><p><strong>QueryBuilders</strong>：查询构建器工厂</p></blockquote><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.封装查询请求</span></span><br><span class="line">SearchRequest searchRequest=<span class="keyword">new</span> SearchRequest(<span class="string">"sku"</span>);</span><br><span class="line"><span class="comment">//设置查询的类型</span></span><br><span class="line">searchRequest.types(<span class="string">"doc"</span>); </span><br><span class="line"><span class="comment">//定义查询的条件，创建搜索源</span></span><br><span class="line">SearchSourceBuilder searchSourceBuilder=<span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"><span class="comment">//布尔查询构建器</span></span><br><span class="line">BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line"><span class="comment">//查询条件 -- 匹配</span></span><br><span class="line">MatchQueryBuilder matchQueryBuilder= QueryBuilders.matchQuery(<span class="string">"name"</span>,<span class="string">"手机"</span>);</span><br><span class="line"><span class="comment">//布尔查询构建器嵌套 与条件</span></span><br><span class="line">boolQueryBuilder.must(matchQueryBuilder);</span><br><span class="line"><span class="comment">//查询条件 -- 词条</span></span><br><span class="line">TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"brandName"</span>, <span class="string">"小米"</span>);</span><br><span class="line"><span class="comment">//布尔查询构建器嵌套 与条件</span></span><br><span class="line">boolQueryBuilder.must(termQueryBuilder);</span><br><span class="line"><span class="comment">//布尔查询构建器嵌套 与条件</span></span><br><span class="line">searchSourceBuilder.query(boolQueryBuilder);</span><br><span class="line"><span class="comment">//搜索源嵌套布尔查询构建器</span></span><br><span class="line">searchRequest.source(searchSourceBuilder);</span><br></pre></td></tr></table></figure><h3 id="7-8-过滤查询"><a href="#7-8-过滤查询" class="headerlink" title="7.8 过滤查询"></a>7.8 过滤查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.封装查询请求</span></span><br><span class="line">SearchRequest searchRequest=<span class="keyword">new</span> SearchRequest(<span class="string">"sku"</span>);</span><br><span class="line"><span class="comment">//设置查询的类型</span></span><br><span class="line">searchRequest.types(<span class="string">"doc"</span>); </span><br><span class="line"><span class="comment">//创建搜索源</span></span><br><span class="line">SearchSourceBuilder searchSourceBuilder=<span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line"><span class="comment">//布尔查询构建器</span></span><br><span class="line">BoolQueryBuilder boolQueryBuilder = QueryBuilders.boolQuery();</span><br><span class="line">TermQueryBuilder termQueryBuilder = QueryBuilders.termQuery(<span class="string">"brandName"</span>, <span class="string">"小米"</span>);</span><br><span class="line">boolQueryBuilder.filter(termQueryBuilder);</span><br><span class="line">searchSourceBuilder.query(boolQueryBuilder);</span><br><span class="line">searchRequest.source(searchSourceBuilder);</span><br></pre></td></tr></table></figure><h2 id="8-ElasticSearch-High-Level-REST-其他功能"><a href="#8-ElasticSearch-High-Level-REST-其他功能" class="headerlink" title="8.ElasticSearch High Level REST 其他功能"></a>8.ElasticSearch High Level REST 其他功能</h2><h3 id="8-1-Scroll-滚屏"><a href="#8-1-Scroll-滚屏" class="headerlink" title="8.1 Scroll 滚屏"></a>8.1 Scroll 滚屏</h3><p>ES中提供了 FROM/SIZE 分页，但这种分页有性能瓶颈。</p><p>Scroll会以间隔时间滚屏的方式返回全部的查询数据，可以作为数据量很大的情况下，分页的一个替代方案</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">scroll</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    <span class="comment">//初始化scroll</span></span><br><span class="line">    <span class="keyword">final</span> Scroll scroll = <span class="keyword">new</span> Scroll(TimeValue.timeValueMinutes(<span class="number">1L</span>)); <span class="comment">//设定滚动时间间隔</span></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">    searchRequest.scroll(scroll);</span><br><span class="line">    SearchSourceBuilder searchSourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    searchSourceBuilder.query(matchAllQuery());</span><br><span class="line">    <span class="comment">//设定每次返回多少条数据</span></span><br><span class="line">    searchSourceBuilder.size(<span class="number">5</span>); </span><br><span class="line">    searchRequest.source(searchSourceBuilder);</span><br><span class="line"></span><br><span class="line">    SearchResponse searchResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        searchResponse = client.search(searchRequest, RequestOptions.DEFAULT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//滚屏设置</span></span><br><span class="line">    String scrollId = searchResponse.getScrollId();</span><br><span class="line">    SearchHit[] searchHits = searchResponse.getHits().getHits();</span><br><span class="line">    System.out.println(<span class="string">"-----首页-----"</span>);</span><br><span class="line">    <span class="keyword">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class="line">        System.out.println(searchHit.getSourceAsString());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//遍历搜索命中的数据，直到没有数据</span></span><br><span class="line">    <span class="keyword">while</span> (searchHits != <span class="keyword">null</span> &amp;&amp; searchHits.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        SearchScrollRequest scrollRequest = <span class="keyword">new</span> SearchScrollRequest(scrollId);</span><br><span class="line">        scrollRequest.scroll(scroll);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            searchResponse = client.scroll(scrollRequest, RequestOptions.DEFAULT);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        scrollId = searchResponse.getScrollId();</span><br><span class="line">        searchHits = searchResponse.getHits().getHits();</span><br><span class="line">        <span class="keyword">if</span> (searchHits != <span class="keyword">null</span> &amp;&amp; searchHits.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"-----下一页-----"</span>);</span><br><span class="line">            <span class="keyword">for</span> (SearchHit searchHit : searchHits) &#123;</span><br><span class="line">                System.out.println(searchHit.getSourceAsString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//清除滚屏</span></span><br><span class="line">    ClearScrollRequest clearScrollRequest = <span class="keyword">new</span> ClearScrollRequest();</span><br><span class="line">    clearScrollRequest.addScrollId(scrollId);<span class="comment">//也可以选择setScrollIds()将多个scrollId一起使用</span></span><br><span class="line">    ClearScrollResponse clearScrollResponse = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clearScrollResponse = client.clearScroll(clearScrollRequest,RequestOptions.DEFAULT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> succeeded = clearScrollResponse.isSucceeded();</span><br><span class="line">    System.out.println(<span class="string">"succeeded:"</span> + succeeded);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-多搜索"><a href="#8-2-多搜索" class="headerlink" title="8.2 多搜索"></a>8.2 多搜索</h3><p>Multi-Search可同时添加多个search搜索请求，并行地在一个http请求中执行多个搜索请求，相较多次单请求查询可提升查询效率。ES客户掉通过mget方法实现多请求搜索</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiSearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    <span class="comment">//Multi-Search请求</span></span><br><span class="line">    MultiSearchRequest request = <span class="keyword">new</span> MultiSearchRequest();</span><br><span class="line">    SearchRequest firstSearchRequest = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">    SearchSourceBuilder firstBuilder = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    </span><br><span class="line">    firstBuilder.query(matchQuery(<span class="string">"name"</span>,<span class="string">"潇潇"</span>));</span><br><span class="line">    firstSearchRequest.source(firstBuilder);</span><br><span class="line">    request.add(firstSearchRequest);</span><br><span class="line">    </span><br><span class="line">    SearchRequest secondRequest = <span class="keyword">new</span> SearchRequest();</span><br><span class="line">    SearchSourceBuilder secondBuild = <span class="keyword">new</span> SearchSourceBuilder();</span><br><span class="line">    secondBuild.query(matchQuery(<span class="string">"position"</span>,<span class="string">"建筑师"</span>));</span><br><span class="line">    secondRequest.source(secondBuild);</span><br><span class="line">    </span><br><span class="line">    request.add(secondRequest);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MultiSearchResponse multiResponse = client.msearch(request, RequestOptions.DEFAULT);</span><br><span class="line">        MultiSearchResponse.Item firstItem  = multiResponse.getResponses()[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (firstItem.getFailure() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第一个请求失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SearchResponse firstResponse = firstItem.getResponse();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit documentFields : firstResponse.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第一个查询请求返回："</span>+documentFields.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        MultiSearchResponse.Item seconditem = multiResponse.getResponses()[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (seconditem.getFailure() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第二个请求失败！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        SearchResponse secondResponse = seconditem.getResponse();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit documentFields : secondResponse.getHits().getHits()) &#123;</span><br><span class="line">            System.out.println(<span class="string">"第二的查询请求返回："</span> + documentFields.getSourceAsString());</span><br><span class="line">        &#125;</span><br><span class="line">        client.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-3-使用模板搜索"><a href="#8-3-使用模板搜索" class="headerlink" title="8.3 使用模板搜索"></a>8.3 使用模板搜索</h3><p>ElasticSearch 还提供了通过模板搜索查询</p><p>可以通过脚本预选注册模板，在注册模板时定义一个模板名称。在查询时通过模板名称调用该模板。首先演示下如何注册模板：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestClient restClient = elasticClient.getRestClient();</span><br><span class="line">    String template = <span class="string">"&#123;\n"</span> +</span><br><span class="line">        <span class="string">"  \"script\":&#123;\n"</span> +</span><br><span class="line">        <span class="string">"    \"lang\":\"mustache\",\n"</span> +</span><br><span class="line">        <span class="string">"    \"source\":&#123;\n"</span> +</span><br><span class="line">        <span class="string">"      \"query\":&#123;\n"</span> +</span><br><span class="line">        <span class="string">"        \"match\":&#123;\n"</span> +</span><br><span class="line">        <span class="string">"          \"&#123;&#123;key&#125;&#125;\":\"&#123;&#123;value&#125;&#125;\"\n"</span> +</span><br><span class="line">        <span class="string">"        &#125;\n"</span> +</span><br><span class="line">        <span class="string">"      &#125;,\n"</span> +</span><br><span class="line">        <span class="string">"      \"size\":\"&#123;&#123;size&#125;&#125;\"\n"</span> +</span><br><span class="line">        <span class="string">"    &#125;\n"</span> +</span><br><span class="line">        <span class="string">"  &#125;\n"</span> +</span><br><span class="line">        <span class="string">"&#125;"</span>;</span><br><span class="line">    Request scriptRequest1 = <span class="keyword">new</span> Request(<span class="string">"POST"</span>, <span class="string">"_scripts/title_search"</span>);</span><br><span class="line">    scriptRequest1.setJsonEntity(template);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        restClient.performRequest(scriptRequest1);</span><br><span class="line">        restClient.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于ElasticSearch 6.5版本的高级Rest API中暂时还没有提供用于注册模板的存储脚本，所以本示例中使用的低级REST客户端。本示例中注册了一个名为“title_search”的模板</p><p>有了这个模板就可以通过“<strong>title_search</strong>”去调用，动态的将查询参数添加到模板中去。模板调用示例如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">templateSearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        SearchTemplateRequest request = <span class="keyword">new</span> SearchTemplateRequest();</span><br><span class="line">        request.setRequest(<span class="keyword">new</span> SearchRequest(<span class="string">"posts"</span>));</span><br><span class="line">        <span class="comment">//调用模板</span></span><br><span class="line">        request.setScriptType(ScriptType.STORED);</span><br><span class="line">        request.setScript(<span class="string">"title_search"</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        params.put(<span class="string">"key"</span>, <span class="string">"name"</span>);</span><br><span class="line">        params.put(<span class="string">"value"</span>, <span class="string">"福卖福"</span>);</span><br><span class="line">        params.put(<span class="string">"size"</span>, <span class="number">5</span>);</span><br><span class="line">        request.setScriptParams(params);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SearchTemplateResponse searchTemplateResponse = client.searchTemplate(request, RequestOptions.DEFAULT);</span><br><span class="line">            SearchHit[] hits = searchTemplateResponse.getResponse().getHits().getHits();</span><br><span class="line">            <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">                System.out.println(hit.getSourceAsString());</span><br><span class="line">            &#125;</span><br><span class="line">            client.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>针对每个模板我们执行一次搜索请求，如果我们工作中针对同一模板可能会有不止一次的请求，如果每个请求都去单独执行的话未免有点繁琐。我们可以通过msearchTemplate来实现一次请求实现多条搜索，示例如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">multiTemplateSearch</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    String [] searchTerms = &#123;<span class="string">"周大福"</span>, <span class="string">"特博士"</span>, <span class="string">"詹姆斯"</span>&#125;; <span class="comment">// 要搜索的条件</span></span><br><span class="line">    MultiSearchTemplateRequest multiRequest = <span class="keyword">new</span> MultiSearchTemplateRequest();</span><br><span class="line">    <span class="keyword">for</span> (String searchTerm : searchTerms) &#123;</span><br><span class="line">        SearchTemplateRequest request = <span class="keyword">new</span> SearchTemplateRequest();</span><br><span class="line">        request.setRequest(<span class="keyword">new</span> SearchRequest(<span class="string">"posts"</span>)); <span class="comment">//指定为posts索引库</span></span><br><span class="line"></span><br><span class="line">        request.setScriptType(ScriptType.INLINE);</span><br><span class="line">        request.setScript(</span><br><span class="line">            <span class="string">"&#123;\n"</span> +</span><br><span class="line">            <span class="string">"  \"query\":&#123;\n"</span> +</span><br><span class="line">            <span class="string">"    \"match\":&#123;\n"</span> +</span><br><span class="line">            <span class="string">"      \"&#123;&#123;key&#125;&#125;\":\"&#123;&#123;value&#125;&#125;\"\n"</span> +</span><br><span class="line">            <span class="string">"    &#125;\n"</span> +</span><br><span class="line">            <span class="string">"  &#125;,\n"</span> +</span><br><span class="line">            <span class="string">"  \"size\":\"&#123;&#123;size&#125;&#125;\"\n"</span> +</span><br><span class="line">            <span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; scriptParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//向模板中填充对应值</span></span><br><span class="line">        scriptParams.put(<span class="string">"key"</span>, <span class="string">"name"</span>);</span><br><span class="line">        scriptParams.put(<span class="string">"value"</span>, searchTerm);</span><br><span class="line">        scriptParams.put(<span class="string">"size"</span>, <span class="number">5</span>);</span><br><span class="line">        request.setScriptParams(scriptParams);</span><br><span class="line"></span><br><span class="line">        multiRequest.add(request);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行查询</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        MultiSearchTemplateResponse multiResponse = client.msearchTemplate(multiRequest, RequestOptions.DEFAULT);</span><br><span class="line">        <span class="comment">//返回一组响应 ，每个请求对应一个响应</span></span><br><span class="line">        <span class="keyword">for</span> (MultiSearchTemplateResponse.Item item : multiResponse.getResponses()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (item.isFailure()) &#123;</span><br><span class="line">                String error = item.getFailureMessage(); <span class="comment">//搜索请求失败返回错误信息</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                SearchTemplateResponse searchTemplateResponse = item.getResponse();</span><br><span class="line">                SearchResponse response = searchTemplateResponse.getResponse();</span><br><span class="line">                SearchHits hits = response.getHits();</span><br><span class="line">                System.out.println(<span class="string">"----------"</span>);</span><br><span class="line">                <span class="keyword">for</span> (SearchHit hit : hits) &#123;</span><br><span class="line">                    System.out.println(hit.getSourceAsString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-4-获取集群信息"><a href="#8-4-获取集群信息" class="headerlink" title="8.4 获取集群信息"></a>8.4 获取集群信息</h3><p> ElasticSearch 可以通过<code>info()</code>方法检索群集信息：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">info</span><span class="params">()</span></span>&#123;</span><br><span class="line">    RestHighLevelClient client = elasticClient.getRestHighLevelClient();</span><br><span class="line">    MainResponse response = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        response = client.info(RequestOptions.DEFAULT);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回集群的各种信息</span></span><br><span class="line">    ClusterName clusterName = response.getClusterName(); <span class="comment">//集群名称</span></span><br><span class="line">    String clusterUuid = response.getClusterUuid(); <span class="comment">//群集的唯一标识符</span></span><br><span class="line">    String nodeName = response.getNodeName(); <span class="comment">//已执行请求的节点的名称</span></span><br><span class="line">    Version version = response.getVersion(); <span class="comment">//已执行请求的节点的版本</span></span><br><span class="line">    Build build = response.getBuild(); <span class="comment">//已执行请求的节点的构建信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>通过使用ping()</code>方法可以检查集群是否连接成功，并返回一个布尔值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> response = client.ping（RequestOptions.DEFAULT）;</span><br></pre></td></tr></table></figure><h2 id="9-相关博客推荐"><a href="#9-相关博客推荐" class="headerlink" title="9.相关博客推荐"></a>9.相关博客推荐</h2><ul><li><a href="http://www.cnblogs.com/ljhdo/p/4887557.html" target="_blank" rel="noopener">ElasticSearch入门 第一篇：Windows下安装ElasticSearch</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/4959412.html" target="_blank" rel="noopener">ElasticSearch入门 第二篇：集群配置</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/4981928.html" target="_blank" rel="noopener">ElasticSearch入门 第三篇：索引</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/5160329.html" target="_blank" rel="noopener">ElasticSearch入门 第四篇：使用C#添加和更新文档</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/4550135.html" target="_blank" rel="noopener">ElasticSearch入门 第五篇：使用C#查询文档</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/4904430.html" target="_blank" rel="noopener">ElasticSearch入门 第六篇：复合数据类型——数组，对象和嵌套</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/5012510.html" target="_blank" rel="noopener">ElasticSearch入门 第七篇：分析器</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/5016852.html" target="_blank" rel="noopener">ElasticSearch入门 第八篇：存储</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/4911878.html" target="_blank" rel="noopener">ElasticSearch入门 第九篇：实现正则表达式查询的思路</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/4486978.html" target="_blank" rel="noopener">ElasticSearch查询 第一篇：搜索API</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/4885796.html" target="_blank" rel="noopener">ElasticSearch查询 第二篇：文档更新</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/4551490.html" target="_blank" rel="noopener">ElasticSearch查询 第三篇：词条查询</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/4577065.html" target="_blank" rel="noopener">ElasticSearch查询 第四篇：匹配查询（Match）</a></li><li><a href="http://www.cnblogs.com/ljhdo/p/5040252.html" target="_blank" rel="noopener">ElasticSearch查询 第五篇：布尔查询</a></li><li><a href="https://www.cnblogs.com/fnlingnzb-learner/p/10750868.html" target="_blank" rel="noopener">使用Java High Level REST Client操作elasticsearch</a></li><li><a href="https://www.cnblogs.com/ginb/p/8696090.html" target="_blank" rel="noopener">使用Java客户端操作elasticsearch（二）</a></li><li><a href="https://www.cnblogs.com/reycg-blog/p/9931482.html" target="_blank" rel="noopener">Elasticsearch Java Rest Client API 整理总结 (一)——Document API</a></li><li><a href="https://www.cnblogs.com/reycg-blog/p/9946821.html" target="_blank" rel="noopener">Elasticsearch Java Rest Client API 整理总结 (二) —— SearchAPI</a></li><li><a href="https://www.cnblogs.com/reycg-blog/p/9993094.html" target="_blank" rel="noopener">Elasticsearch Java Rest Client API 整理总结 (三)——Building Queries</a></li><li><a href="https://www.cnblogs.com/reycg-blog/p/10000052.html" target="_blank" rel="noopener">Elasticsearch Query DSL 整理总结（一）—— Query DSL 概要，MatchAllQuery，全文查询简述</a></li><li><a href="https://www.cnblogs.com/reycg-blog/p/10002794.html" target="_blank" rel="noopener">Elasticsearch Query DSL 整理总结（二）MatchAllQuery详解</a></li><li><a href="https://www.cnblogs.com/reycg-blog/p/10012238.html" target="_blank" rel="noopener">Elasticsearch Query DSL 整理总结（三）—— Match Phrase Query 和 Match Phrase Prefix Query</a></li><li><a href="https://www.cnblogs.com/reycg-blog/p/10055039.html" target="_blank" rel="noopener">Elasticsearch Query DSL 整理总结（四）—— Multi Match Query</a></li></ul><ul><li><p>官网链接</p><p>Elasticsearch: 权威指南：<a href="https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/cn/elasticsearch/guide/current/index.html</a></p><p> Java REST Client： <a href="https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.3/index.html" target="_blank" rel="noopener">https://www.elastic.co/guide/en/elasticsearch/client/java-rest/6.3/index.html</a>：</p></li></ul><hr><p>本文由zhoulu整理，感谢</p><p>over</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringDataRedis实现缓存问题的解决</title>
      <link href="/2019/07/01/SpringDataRedis%E5%A4%87%E5%BF%98/"/>
      <url>/2019/07/01/SpringDataRedis%E5%A4%87%E5%BF%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Spring Data是Spring的一个子项目。Spring官方提供一套数据层综合解决方案，用于简化数据库访问，支持NoSQL和关系数据库存储。包括Spring Data JPA 、Spring Data Redis 、SpringDataSolr、SpringDataElasticsearch 、Spring DataMongodb 等框架。</p><p><a href="https://spring.io/projects/spring-data-redis#overview" target="_blank" rel="noopener">Spring Data Redis（SDR）</a>提供Spring框架和Redis键值存储之间的集成！</p><h1 id="为什么SDR"><a href="#为什么SDR" class="headerlink" title="为什么SDR"></a>为什么SDR</h1><pre><code>Spring Framework是领先的全栈Java / JEE应用程序框架。它提供了一个轻量级容器和一个非侵入式编程模型，它通过使用依赖注入，AOP和便携式服务抽象来实现。NoSQL存储系统为经典RDBMS提供了水平可扩展性和速度的替代方案。在实现方面，键值存储代表NoSQL空间中最大（和最老）的成员之一。Spring Data Redis（SDR）框架通过Spring的优秀基础架构支持消除了与商店交互所需的冗余任务和样板代码，可以轻松编写使用Redis键值存储的Spring应用程序。</code></pre><p>这段文字来自官方文档。</p><p>在手上的项目中，选择了Jedis为客户端工具，它是Redis官方首选的Java客户端开发包，还有JRedis等多种。<br>spring-data-redis针对jedis提供了如下功能： </p><pre><code>1.连接池自动管理，提供了一个高度封装的“RedisTemplate”类，提供高级抽象，用于执行各种Redis操作，异常转换和序列化支持2.针对jedis客户端中大量api进行了归类封装,将同一类型操作封装为operation接口     ValueOperations：简单K-V操作    SetOperations：set类型数据操作    ZSetOperations：zset类型数据操作    HashOperations：针对map类型的数据操作    ListOperations：针对list类型的数据操作</code></pre><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>0.命令</p><pre><code>redisTemplate.boundValueOps();//对字符串或值操作  set/get/deleteredisTemplate.boundListOps();//对List集合操作  lpush/rpush/range/index/remove redisTemplate.boundSetOps();//对Set集合操作  add/members/remove/deleteredisTemplate.boundHashOps();//对Hash操作  put/keys/values/get(key)/delete(key)redisTemplate.boundZSetOps();//对ZSet操作 add/range/reverseRange/incrementScore</code></pre><p>设置过期时间</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 存值</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="meta">@Test</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">     redisTemplate.boundValueOps(<span class="string">"name"</span>).set(<span class="string">"aaaa"</span>);</span><br><span class="line">     redisTemplate.boundValueOps(<span class="string">"name"</span>).expire(<span class="number">10</span>,TimeUnit.SECONDS);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>1.添加依赖</p><pre><code>&lt;!--缓存--&gt;&lt;dependency&gt;    &lt;groupId&gt;redis.clients&lt;/groupId&gt;    &lt;artifactId&gt;jedis&lt;/artifactId&gt;    &lt;version&gt;2.9.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.data&lt;/groupId&gt;    &lt;artifactId&gt;spring-data-redis&lt;/artifactId&gt;    &lt;version&gt;2.0.5.RELEASE&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>2.配置redis-config.properties</p><pre><code>redis.host=127.0.0.1redis.port=6379redis.pass=redis.database=0redis.maxIdle=300redis.maxWait=3000</code></pre><p>3.配置applicationContext-redis.xml</p><pre><code>   &lt;context:property-placeholder location=&quot;classpath:redis-config.properties&quot; /&gt;   &lt;!-- redis 相关配置 --&gt;    &lt;bean id=&quot;poolConfig&quot; class=&quot;redis.clients.jedis.JedisPoolConfig&quot;&gt;       &lt;property name=&quot;maxIdle&quot; value=&quot;${redis.maxIdle}&quot; /&gt;        &lt;property name=&quot;maxWaitMillis&quot; value=&quot;${redis.maxWait}&quot; /&gt;     &lt;/bean&gt;     &lt;bean id=&quot;jedisConnectionFactory&quot; class=&quot;org.springframework.data.redis.connection.jedis.JedisConnectionFactory&quot;       p:host-name=&quot;${redis.host}&quot; p:port=&quot;${redis.port}&quot; p:password=&quot;${redis.pass}&quot; p:pool-config-ref=&quot;poolConfig&quot;/&gt;     &lt;bean id=&quot;redisTemplate&quot; class=&quot;org.springframework.data.redis.core.RedisTemplate&quot;&gt;          &lt;property name=&quot;connectionFactory&quot; ref=&quot;jedisConnectionFactory&quot; /&gt;   &lt;/bean&gt;&lt;/beans&gt;  </code></pre><h1 id="业务场景分析"><a href="#业务场景分析" class="headerlink" title="业务场景分析"></a>业务场景分析</h1><ul><li>在做电商门户系统前台的分类导航和广告显示时，可能发生与数据库过于频繁的交互，或者恶意攻击的行为而导致数据库压力过大等问题，以致缓存穿透，缓存击穿和缓存雪崩问题。<blockquote><p>因此将这些数据在页面加载时就放到缓存中，定义一个Init类(实现InitializingBean)，重写方法。另外，在增删改的操作时，应该更新缓存。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis分页插件PageHelper的问题</title>
      <link href="/2019/06/08/Mybatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/08/Mybatis%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h2><p><font color="red">在使用Mybatis的第三方分页插件时，出现了下面的问题</font></p><pre><code>com.github.pagehelper.PageHelper cannot be cast to org.apache.ibatis.plugin.Interceptor</code></pre><p>具体如图</p><p><img src="https://i.loli.net/2019/06/08/5cfbae47865db77511.png" alt></p><p>附上代码</p><pre><code>&lt;!--引入分页助手--&gt;&lt;plugins&gt;    &lt;plugin interceptor=&quot;com.github.pagehelper.PageHelper&quot;&gt;        &lt;!--指定方言--&gt;        &lt;property name=&quot;dialect&quot; value=&quot;mysql&quot;/&gt;    &lt;/plugin&gt;&lt;/plugins&gt;</code></pre><p><font color="red">此出导入的jar包版本为5.1.2</font></p><p>关注报错信息发现，PageHelper无法转化为Interceptor,查阅信息，再打开源码查看的确有些端倪</p><p><img src="https://i.loli.net/2019/06/08/5cfbb0d6c41a131692.png" alt><br>有一个PageInterceptor实现了Interceptor接口，再将代码中的PageHelper改为PageInterceptor后，又出现了新问题</p><pre><code>Error parsing SQL Mapper Configuration. Cause: com.github.pagehelper.PageException: java.lang.ClassNotFoundException: mysql</code></pre><p><img src="https://i.loli.net/2019/06/08/5cfbb1773c2db17685.png" alt></p><p>查询信息后了解到，<font color="red">PageHelper插件4.0.0后的版本支持自动识别使用数据库，不用配置方言</font>，因此我将代码改为了如下</p><pre><code>&lt;plugins&gt;    &lt;plugin interceptor=&quot;com.github.pagehelper.PageInterceptor&quot;&gt;    &lt;/plugin&gt;&lt;/plugins&gt;</code></pre><p>程序正常运行！</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>${pageContext.request.contextPath}与web.xml问题</title>
      <link href="/2019/06/01/web_xml%E5%A4%B4%E9%97%AE%E9%A2%98/"/>
      <url>/2019/06/01/web_xml%E5%A4%B4%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>在使用idea中的maven-webapp骨架创建web项目时，我的web.xml文件头默认为</p><pre><code>&lt;!DOCTYPE web-app PUBLIC        &quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;        &quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot; &gt;&lt;web-app&gt;</code></pre><p>之初，配置Spring前端控制器，全局参数…等等，<webapp>标签报红，但这并不影响项目的正常运行，因此也没换成</webapp></p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/j2ee&quot;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd&quot;         version=&quot;2.4&quot;&gt;</code></pre><p>但是，在处理SpringMVC请求去获取集合类型参数时，使用了${pageContext.request.contextPath} 表达式，比如下面</p><pre><code>&lt;script src=&quot;${pageContext.request.contextPath}/js/jquery-3.3.1.js&quot;&gt;&lt;/script&gt;    &lt;script&gt;        var userList = new Array();        userList.push({name:&quot;zhangsan&quot;,age:23});        userList.push({name:&quot;lisi&quot;,age:25});        $.ajax({            type:&quot;post&quot;,            url:&quot;${pageContext.request.contextPath}/user/success9&quot;,            data:JSON.stringify(userList),            contentType:&quot;application/json;charset=utf-8&quot;        });    &lt;/script&gt;</code></pre><p>报错如下</p><p><img src="https://i.loli.net/2019/06/01/5cf264ea37c8462438.png" alt></p><p>？？？难道使我js路径写的有问题？仔细检查并没有，此时idea控制台并没有报错详细信息。</p><p>再打开f12</p><p><img src="https://i.loli.net/2019/06/01/5cf264f4dce5d41472.png" alt></p><p>再把xml文件头改成上面那个，就好了…这里的version应该在2.4以上，因此在使用${pageContext.request.contextPath}表达式时，web.xml的头应该换成“常规形式”。</p><hr><p>觉得有用不如进入我的<a href="http://jigw.top/comments/" target="_blank" rel="noopener">Github博客</a>留个言吧，谢谢支持！</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> xml </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一个转账案例-Spring声明式事务全注解开发完成</title>
      <link href="/2019/05/31/Spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%85%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/"/>
      <url>/2019/05/31/Spring%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E5%85%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="xml配置文件"><a href="#xml配置文件" class="headerlink" title="xml配置文件"></a>xml配置文件</h2><p>在使用全注解形式去完成转账案例之前，我们先看看在使用纯xml配置的applicationConfiguration.xml</p><pre><code>&lt;bean id=&quot;accountDao&quot; class=&quot;com.xxx.dao.impl.AccountDaoImpl&quot;&gt;    &lt;property name=&quot;jdbcTemplate&quot; ref=&quot;jdbcTemplate&quot;/&gt;&lt;/bean&gt;&lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;&lt;/bean&gt;&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;    &lt;property name=&quot;driverClass&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;    &lt;property name=&quot;jdbcUrl&quot; value=&quot;jdbc:mysql:///account_db&quot;/&gt;    &lt;property name=&quot;user&quot; value=&quot;root&quot;/&gt;    &lt;property name=&quot;password&quot; value=&quot;123456&quot;/&gt;&lt;/bean&gt;&lt;bean id=&quot;accountService&quot; class=&quot;com.xxx.service.impl.AccountServiceImpl&quot;&gt;    &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;/&gt;&lt;/bean&gt;&lt;!--配置平台事务管理器 同样要依赖dataSource--&gt;&lt;bean id=&quot;transactionManager&quot; class=&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;&gt;    &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;&lt;/bean&gt;&lt;!--通知事务的增强--&gt;&lt;!--propagation 事务传播行为REQUIRED：指定当前方法必需在事务环境中运行，如果当前有事务环境就加入当前正在执行的事务环境，如果当前没有事务，就新建一个事务。这是默认值。isolation 事务隔离级别DEFAULT：采用数据库默认隔离级别--&gt;&lt;tx:advice id=&quot;tx&quot; transaction-manager=&quot;transactionManager&quot;&gt;    &lt;tx:attributes&gt;        &lt;tx:method name=&quot;transfer&quot; isolation=&quot;DEFAULT&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;false&quot;/&gt;        &lt;tx:method name=&quot;find&quot; isolation=&quot;DEFAULT&quot; propagation=&quot;REQUIRED&quot; read-only=&quot;true&quot;/&gt;        &lt;tx:method name=&quot;*&quot;/&gt;    &lt;/tx:attributes&gt;&lt;/tx:advice&gt;&lt;!--事务的织入--&gt;&lt;aop:config proxy-target-class=&quot;true&quot;&gt;    &lt;aop:advisor advice-ref=&quot;tx&quot; pointcut=&quot;execution(* com.xxxservice.impl.*.*(..))&quot;/&gt;&lt;/aop:config&gt;</code></pre><h2 id="全注解形式源码"><a href="#全注解形式源码" class="headerlink" title="全注解形式源码"></a>全注解形式源码</h2><ol start="0"><li><p>建表</p><pre><code>CREATE TABLE account(    id INT PRIMARY KEY AUTO_INCREMENT,    NAME VARCHAR(20),    money DECIMAL);</code></pre></li><li><p>导入所需坐标</p><pre><code>&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;        &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.aspectj&lt;/groupId&gt;        &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;        &lt;version&gt;1.8.4&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;        &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;        &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;        &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;c3p0&lt;/groupId&gt;        &lt;artifactId&gt;c3p0&lt;/artifactId&gt;        &lt;version&gt;0.9.1.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;5.1.32&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.12&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;</code></pre></li><li><p>AccountDaoImpl.java</p><pre><code>@Repositorypublic class AccountDaoImpl implements AccountDao {@Autowiredprivate JdbcTemplate jdbcTemplate;</code></pre></li></ol><pre><code>    public void out(String outMan, double money) {        jdbcTemplate.update(&quot;update account set money=money-? where name=?&quot;,money,outMan);    }    public void in(String inMan, double money) {        jdbcTemplate.update(&quot;update account set money=money+? where name=?&quot;,money,inMan);    }}</code></pre><ol start="3"><li><p>AccountServiceImpl.java</p><pre><code>@Service@EnableTransactionManagementpublic class AccountServiceImpl implements AccountService {    @Autowired    private AccountDao accountDao;    @Transactional(isolation = Isolation.DEFAULT,propagation = Propagation.REQUIRED,readOnly = false)    public void transfer(String outMan, String inMan, double money) {        accountDao.out(outMan,money);//        int i = 1/0;        accountDao.in(inMan,money);    }}</code></pre></li><li><p>SpringConfiguration.java</p><p>@Configuration</p><pre><code>@ComponentScan(&quot;com.xxx&quot;)@Import(DataSourceConfiguration.class)public class SpringConfiguration {</code></pre></li></ol><pre><code>}</code></pre><ol start="5"><li><p>DataSourceConfiguration.java</p><pre><code>@Configuration@PropertySource(&quot;classpath:jdbc.properties&quot;)public class DataSourceConfiguration {</code></pre></li></ol><pre><code>    @Value(&quot;${jdbc.driver}&quot;)    private String driverClass;    @Value(&quot;${jdbc.url}&quot;)    private String url;    @Value(&quot;${jdbc.username}&quot;)    private String user;    @Value(&quot;${jdbc.password}&quot;)    private String password;    @Bean    public DataSource getDataSource() throws PropertyVetoException {        ComboPooledDataSource dataSource = new ComboPooledDataSource();        dataSource.setDriverClass(driverClass);        dataSource.setJdbcUrl(url);        dataSource.setUser(user);        dataSource.setPassword(password);        return dataSource;    }    @Bean    public JdbcTemplate getTemplate(DataSource dataSource){        return new JdbcTemplate(dataSource);    }    @Bean    public DataSourceTransactionManager getDSTM(DataSource dataSource){        return new DataSourceTransactionManager(dataSource);    }}</code></pre><ol start="6"><li><p>jdbc.properties</p><pre><code>jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql:///account_dbjdbc.username=rootjdbc.password=123456</code></pre></li><li><p>测试</p><pre><code>@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(classes = SpringConfiguration.class)public class AnnoTest {    @Autowired    private AccountService accountService;    @Test    public void test02(){        accountService.transfer(&quot;tom&quot;,&quot;lucy&quot;,500f);    }}</code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> annotation </tag>
            
            <tag> transaction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring注解</title>
      <link href="/2019/05/29/Spring%E6%B3%A8%E8%A7%A3/"/>
      <url>/2019/05/29/Spring%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>初学Spring,相较于xml文件的配置，注解开发的确要简洁的多。但有时还是会忘了一些，故在此整合。</p><h2 id="一般注解列表"><a href="#一般注解列表" class="headerlink" title="一般注解列表"></a>一般注解列表</h2><pre><code>注解                                               说明@Component                                   使用在类上用于实例化Bean@Controller                             使用在web层类上用于实例化Bean@Service                                 使用在service层类上用于实例化Bean@Repository                         使用在dao层类上用于实例化Bean@Autowired                         使用在字段上用于根据类型依赖注入@Qualifier                             结合@Autowired一起使用用于根据名称进行依赖注入@Resource                         相当于@Autowired+@Qualifier，按照名称进行注入@Value                             注入普通属性@Scope                             标注Bean的作用范围@PostConstruct                     使用在方法上标注该方法是Bean的初始化方法@PreDestroy                         使用在方法上标注该方法是Bean的销毁方法</code></pre><p>配置组件扫描</p><pre><code> &lt;!--注解的组件扫描--&gt;&lt;context:component-scan base-package=&quot;com.xxx&quot;&gt;&lt;/context:component-scan&gt;</code></pre><hr><p>较新的</p><pre><code>@Configuration             用于指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解@ComponentScan            用于指定 Spring 在初始化容器时要扫描的包。 作用和在 Spring 的 xml 配置文件中的 &lt;context:component-scan base-package=&quot;com.itheima&quot;/&gt;一样@Bean                     使用在方法上，标注将该方法的返回值存储到 Spring 容器中@PropertySource             用于加载.properties 文件中的配置@Import                     用于导入其他配置类</code></pre><p>这里注意非自定义的Bean的配置</p><pre><code>加载properties文件的配置：context:property-placeholder组件扫描的配置：context:component-scan</code></pre><hr><p>Spring集成<font color="red">Junit测试</font>注解</p><p>配置@Runwith、@ContextConfiguration注解<br>这里测试的基本流程为</p><ul><li>导入spring集成Junit的坐标</li><li>使用@Runwith注解替换原来的运行期</li><li>使用@ContextConfiguration指定配置文件或配置类</li><li>使用@Autowired注入需要测试的对象</li><li>创建测试方法进行测试</li></ul><p>Demo</p><pre><code>@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(classes = {SpringConfiguration.class})public class SpringJunitTest {  @Autowired  private UserService userService;  @Test  public void testUserService(){ userService.save(); }}</code></pre><hr><p> 基于<font color="red">AOP</font>开发的注解<br>先了解开发步骤</p><p>①使用<font color="red">@Aspect</font>标注切面类</p><p>②使用@通知注解标注通知方法</p><p>③在配置文件中配置aop自动代理<font color="red"><a href="aop:aspectj-autoproxy/" target="_blank" rel="noopener">aop:aspectj-autoproxy/</a></font></p><p>其中第②步的注解有以下<br><img src="https://i.loli.net/2019/05/31/5cf08952e6ade71571.png" alt></p><h2 id="声明式事务控制的注解开发"><a href="#声明式事务控制的注解开发" class="headerlink" title="声明式事务控制的注解开发"></a>声明式事务控制的注解开发</h2><p>@Transactional 在想要添加事务的方法上使用(可加参数)</p><p>@EableTransactionManagement 注解驱动(相当于annotation-driven,一般放在业务层上)</p><p>@EableAspectJAutoProxy 开启AOP自动代理支持</p>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> annotation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring通过DataSource获取数据库数据(非注解方式和注解形式)及Spring集成Junit测试</title>
      <link href="/2019/05/27/Spring%E9%80%9A%E8%BF%87DataSource%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE/"/>
      <url>/2019/05/27/Spring%E9%80%9A%E8%BF%87DataSource%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E5%BA%93%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="非注解"><a href="#非注解" class="headerlink" title="非注解"></a>非注解</h2><p>这里就不多说了，直接来源码</p><p>1.导入各坐标<br>这里包括数据库连接池(druid/c3p0)，单元测试，数据库连接驱动坐标以及spring的依赖就不一一写出了</p><pre><code>&lt;dependencies&gt;&lt;dependency&gt;  &lt;groupId&gt;org.springframework&lt;/groupId&gt;  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;  &lt;version&gt;5.0.5.RELEASE&lt;/version&gt;&lt;/dependency&gt;&lt;!--druid连接池--&gt;&lt;dependency&gt;  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;  &lt;artifactId&gt;druid&lt;/artifactId&gt;  &lt;version&gt;1.1.13&lt;/version&gt;&lt;/dependency&gt;</code></pre><p>2.AccountDaoImpl.java</p><pre><code>public class AccountDaoImpl implements AccountDao {private JdbcTemplate template;public void setTemplate(JdbcTemplate template) {    this.template = template;}public void findAll(){    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(&quot;select * from teacher&quot;);    for (Map&lt;String, Object&gt; map : list) {        for (String s : map.keySet()) {            System.out.println(s+&quot;:&quot;+map.get(s));        }    }  }}</code></pre><p>3.AccountServiceImpl.java</p><pre><code>public class AccountServiceImpl implements AccountService {    private AccountDaoImpl accountDao;    public void setAccountDao(AccountDaoImpl accountDao) {        this.accountDao = accountDao;    }    @Override    public void findAll() {        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        AccountDao accountDao = (AccountDao) applicationContext.getBean(&quot;accountDao&quot;);        accountDao.findAll();        System.out.println(&quot;username:&quot;+username);    }}</code></pre><p>4.applicationContext.xml</p><pre><code>&lt;bean id=&quot;accountDao&quot; class=&quot;top.jigw.dao.impl.AccountDaoImpl&quot;&gt;        &lt;property name=&quot;template&quot; ref=&quot;jdbcTemplate&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;bean id=&quot;accountService&quot; class=&quot;top.jigw.service.impl.AccountServiceImpl&quot;&gt;        &lt;property name=&quot;accountDao&quot; ref=&quot;accountDao&quot;&gt;&lt;/property&gt;    &lt;/bean&gt;    &lt;bean id=&quot;dataSource&quot; class=&quot;com.alibaba.druid.pool.DruidDataSourceFactory&quot; factory-method=&quot;createDataSource&quot;&gt;        &lt;constructor-arg name=&quot;properties&quot;&gt;            &lt;props&gt;                &lt;prop key=&quot;driverClassName&quot;&gt;com.mysql.jdbc.Driver&lt;/prop&gt;                &lt;prop key=&quot;url&quot;&gt;jdbc:mysql:///test&lt;/prop&gt;                &lt;prop key=&quot;username&quot;&gt;root&lt;/prop&gt;                &lt;prop key=&quot;password&quot;&gt;123456&lt;/prop&gt;            &lt;/props&gt;        &lt;/constructor-arg&gt;    &lt;/bean&gt;    &lt;bean id=&quot;jdbcTemplate&quot; class=&quot;org.springframework.jdbc.core.JdbcTemplate&quot;&gt;        &lt;constructor-arg name=&quot;dataSource&quot; ref=&quot;dataSource&quot;&gt;&lt;/constructor-arg&gt;    &lt;/bean&gt;</code></pre><p>5.单元测试</p><pre><code>public class test {    @Test    public void test01() {        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        AccountService accountService = (AccountService) applicationContext.getBean(&quot;accountService&quot;);        accountService.findAll();    }}</code></pre><h2 id="注解形式"><a href="#注解形式" class="headerlink" title="注解形式"></a>注解形式</h2><p>1.首先同样是导入坐标</p><p>2.提取jdbc.properties</p><pre><code>jdbc.driver=com.mysql.jdbc.Driverjdbc.url=jdbc:mysql:///testjdbc.username=rootjdbc.password=123456</code></pre><p>3.了解下Spring的一些基本注解吧</p><pre><code>注解                             说明@Component        使用在类上用于实例化Bean@Controller            使用在web层类上用于实例化Bean@Service              使用在service层类上用于实例化Bean@Repository         使用在dao层类上用于实例化Bean@Autowired         使用在字段上用于根据类型依赖注入@Qualifier             结合@Autowired一起使用用于根据名称进行依赖注入@Resource         相当于@Autowired+@Qualifier，按照名称进行注入@Value             注入普通属性@Scope             标注Bean的作用范围@PostConstruct     使用在方法上标注该方法是Bean的初始化方法@PreDestroy         使用在方法上标注该方法是Bean的销毁方法@Configuration 用于指定当前类是一个 Spring 配置类，当创建容器时会从该类上加载注解@ComponentScan 用于指定 Spring 在初始化容器时要扫描的包。 作用和在 Spring 的 xml 配置文件中的 &lt;context:component-scan base-package=&quot;com.itheima&quot;/&gt;一样@Bean 使用在方法上，标注将该方法的返回值存储到 Spring 容器中@PropertySource 用于加载.properties 文件中的配置@Import 用于导入其他配置类</code></pre><p>使用注解进行开发时，需要在applicationContext.xml中配置组件扫描，作用是指定哪个包及其子包下的Bean需要<br>进行扫描以便识别使用注解配置的类、字段和方法。</p><pre><code>&lt;context:component-scan base-package=&quot;top.jigw&quot;&gt;&lt;/context:component-scan&gt;</code></pre><p>4.AccountDaoImpl.java</p><pre><code>@Repository(&quot;accountDao&quot;)public class AccountDaoImpl implements AccountDao {private JdbcTemplate template;public void setTemplate(JdbcTemplate template) {    this.template = template;}public void findAll(){    List&lt;Map&lt;String, Object&gt;&gt; list = template.queryForList(&quot;select * from teacher&quot;);    for (Map&lt;String, Object&gt; map : list) {        for (String s : map.keySet()) {            System.out.println(s+&quot;:&quot;+map.get(s));        }    }  }}</code></pre><p>5.AccountServiceImpl.java</p><pre><code>@Service(&quot;accountService&quot;)public class AccountServiceImpl implements AccountService {    private AccountDaoImpl accountDao;    public void setAccountDao(AccountDaoImpl accountDao) {        this.accountDao = accountDao;    }    @Override    public void findAll() {        ClassPathXmlApplicationContext applicationContext = new ClassPathXmlApplicationContext(&quot;applicationContext.xml&quot;);        AccountDao accountDao = (AccountDao) applicationContext.getBean(&quot;accountDao&quot;);        accountDao.findAll();        System.out.println(&quot;username:&quot;+username);    }}</code></pre><p>6.SpringConfiguration.java</p><pre><code>@Configuration@ComponentScan(&quot;top.jigw&quot;)@Import({DataSourceConfiguration.class})public class SpringConfiguration {}</code></pre><p>7.DataSourceConfiguration.java</p><pre><code>@PropertySource(&quot;classpath:jdbc.properties&quot;)public class DataSourceConfiguration {    @Value(&quot;${jdbc.driver}&quot;)    private String driver;    @Value(&quot;${jdbc.url}&quot;)    private String url;    @Value(&quot;${jdbc.username}&quot;)    private String username;    @Value(&quot;${jdbc.password}&quot;)    private String password;    @Bean(name = &quot;dataSource&quot;)    public DataSource getDataSource(){        DruidDataSource dataSource = new DruidDataSource();        dataSource.setDriverClassName(driver);        dataSource.setUrl(url);        dataSource.setUsername(username);        dataSource.setPassword(password);        return dataSource;    }    @Bean(name = &quot;template&quot;)    public JdbcTemplate getTemplate(DataSource dataSource){        return new JdbcTemplate(dataSource);    }}</code></pre><h2 id="集成Junit测试"><a href="#集成Junit测试" class="headerlink" title="集成Junit测试"></a>集成Junit测试</h2><p>这里需要导入spring-test依赖包</p><pre><code>Spring集成Junit步骤①导入spring集成Junit的坐标②使用@Runwith注解替换原来的运行期③使用@ContextConfiguration指定配置文件或配置类④使用@Autowired注入需要测试的对象⑤创建测试方法进行测试</code></pre><p>SpringJunitTest.java</p><pre><code>@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(classes = SpringConfiguration.class)public class SpringJunitTest {    @Autowired    private AccountService accountService;    @Test    public void testService(){        accountService.findAll();    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 框架 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> maven </tag>
            
            <tag> druid </tag>
            
            <tag> junit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>servlet域对象</title>
      <link href="/2019/05/05/servlet%E5%9F%9F%E5%AF%B9%E8%B1%A1/"/>
      <url>/2019/05/05/servlet%E5%9F%9F%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p>在学习servlet的过程中，数据共享是必须的操作。总的来说，我们要想共享数据往往是利用<font color="pink" size="3"><strong>多个servlet或对象共同操作的一个对象</strong></font>，这类对象称之为<font color="pink" size="3"><strong>作用域</strong></font>。</p><h2 id="HttpServletRequest"><a href="#HttpServletRequest" class="headerlink" title="HttpServletRequest"></a>HttpServletRequest</h2><p>针对<font color="red" size="3"><strong>一次请求</strong></font>。<br>使用该对象保存数据，一次请求(一个页面，如果是请求转发多个页面)内有效。</p><ul><li>创建：客户端想服务器端发送一次请求</li><li>销毁：服务器响应后销毁</li></ul><h2 id="HttpServletSession"><a href="#HttpServletSession" class="headerlink" title="HttpServletSession"></a>HttpServletSession</h2><p>针对<font color="red" size="3"><strong>一次会话</strong></font>。<br>使用该对象保存数据，一次会话(多次请求)有效。</p><ul><li>创建：请求未携带jsessionid时创建session对象，请求携带jsessionid但找不到对应的session时创建session对象。</li><li>销毁：<pre><code>1. 未正常关闭服务器2. 手动调用了Session的invalidate方法3. session过期了，有效时间默认为30分钟</code></pre></li></ul><h2 id="HttpServletContext"><a href="#HttpServletContext" class="headerlink" title="HttpServletContext"></a>HttpServletContext</h2><p>针对<font color="red" size="3"><strong>一个web应用</strong></font>。<br>一个web应用只有一个ServletContext对象，该对象保存的数据对整个web应用都有效。我们可以把ServletContext与其他对象描绘成水和鱼类的关系。</p><ul><li>创建：服务器启动的时候</li><li>销毁：服务器关闭的时候或者项目移除</li></ul><h3 id="三个作用域对象操作的API"><a href="#三个作用域对象操作的API" class="headerlink" title="三个作用域对象操作的API"></a>三个作用域对象操作的API</h3><p>api都是一样的,完成存取和销毁的操作</p><ul><li>存放数据：setAttribute(name,value)</li><li>获得数据：getAttribute(name)</li><li>删除数据：removeAttribute(name)</li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>servlet为我们提供的三大域对象来帮助我们实现不同情况下的数据共享,<font color="blue" size="3"><strong>若一个业务功能使用这三个域对象都可以实现,我们一般选用最小的域对象</strong></font>.作用域越小,生命周期越短,在一定程度上可以提供程序的执行效率</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> servlet </tag>
            
            <tag> request </tag>
            
            <tag> session </tag>
            
            <tag> ServletContext </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事务及隔离级别</title>
      <link href="/2019/05/02/%E4%BA%8B%E5%8A%A1%E5%8F%8A%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/"/>
      <url>/2019/05/02/%E4%BA%8B%E5%8A%A1%E5%8F%8A%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><hr><h2 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h2><p>事务是逻辑上的一组操作，要么都执行，要么都不执行。最简单的；例子如银行转账，双方一人账户增加多少钱，另一人账号就减少多少钱。</p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><pre><code>1. 开启事务： start transaction;2. 回滚：rollback;3. 提交：commit;事务提交的方式：    1. 自动提交        MySQL的提交方式    2. 手动提交        Oracle的提交方式修改事务提交的方式    查看事务的默认提交方式：SELECT @@autocommit; -- 1 代表自动提交  0 代表手动提交    修改默认提交方式： set @@autocommit = 0;</code></pre><h2 id="事务的四个特征"><a href="#事务的四个特征" class="headerlink" title="事务的四个特征"></a>事务的四个特征</h2><ul><li>原子性：是不可分割的最小操作单位，要么同时成功，要么同时失败</li><li>持久性：当事务提交或回滚后，数据库会持久化的保存数据。</li><li>隔离性：多个事务之间。相互独立。</li><li>一致性：事务操作前后，数据总量不变</li></ul><h2 id="事务的隔离级别"><a href="#事务的隔离级别" class="headerlink" title="事务的隔离级别"></a>事务的隔离级别</h2><p>多个事务是相互隔离的、独立的，但多个事务处理同样一批数据时便会发生问题，这时就必须设置隔离级别来解决这些问题。</p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul><li>脏读(Dirty Read)：一个事务读取到另一个事务未提交的数据</li><li>不可重复读(虚读)(Unrepeatable Read)：同一个事务中，两次读取的数据不一样。在这个事务还没有结束时，另一个事务也访问该数据。那么，在第一个事务中的两次读数据之间，由于第二个事务的修改导致第一个事务两次读取的数据可能不太一样。</li><li>幻读(Phantom Read)：一个事务操作(DML)数据表中所有记录，另一个事务添加了一条数据，则第一个事务查询不到自己的修改。</li><li>有人也说还有第四种问题-丢失修改(Lost to modify)：指在一个事务读取一个数据时，另外一个事务也访问了该数据，那么在第一个事务中修改了这个数据后，第二个事务也修改了这个数据。这样第一个事务内的修改结果就被丢失，因此称为丢失修改。    例如：事务1读取某表中的数据A=20，事务2也读取A=20，事务1修改A=A-1，事务2也修改A=A-1，最终结果A=18，事务1的修改被丢失。</li></ul><p><strong>不可重复度和幻读区别</strong>：<br>不可重复读的重点是修改，幻读的重点在于新增或者删除。</p><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><ul><li><strong>READ-UNCOMMITTED(读取未提交)：</strong> 最低的隔离级别，允许读取尚未提交的数据变更，<strong>可能会导致脏读、幻读或不可重复读</strong>。</li><li><strong>READ-COMMITTED(读取已提交)：</strong> 允许读取并发事务已经提交的数据，<strong>可以阻止脏读，但是幻读或不可重复读仍有可能发生</strong>。</li><li><strong>REPEATABLE-READ(可重复读)：</strong>  对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，<strong>可以阻止脏读和不可重复读，但幻读仍有可能发生</strong>。</li><li><strong>SERIALIZABLE(可串行化)：</strong> 最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，<strong>该级别可以防止脏读、不可重复读以及幻读</strong>。</li></ul><p><strong>特点</strong>：安全等级越来越高，但效率越来越低。</p><pre><code>数据库查询隔离级别：    * select @@tx_isolation;数据库设置隔离级别：    * set global transaction isolation level  级别字符串;</code></pre><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>在Github上的JavaGuide-master仓库中写到</p><blockquote><p>由 <a href="https://github.com/Snailclimb" target="_blank" rel="noopener">SnailClimb</a> 和 <a href="https://github.com/BugSpeak" target="_blank" rel="noopener">BugSpeak</a> 共同完成。</p></blockquote><pre><code>这里需要注意的是：与 SQL 标准不同的地方在于InnoDB 存储引擎在 **REPEATABLE-READ（可重读）**事务隔离级别下使用的是Next-Key Lock 锁算法，因此可以避免幻读的产生，这与其他数据库系统(如 SQL Server)是不同的。所以说InnoDB 存储引擎的默认支持的隔离级别是 **REPEATABLE-READ（可重读）** 已经可以完全保证事务的隔离性要求，即达到了 SQL标准的**SERIALIZABLE(可串行化)**隔离级别。因为隔离级别越低，事务请求的锁越少，所以大部分数据库系统的隔离级别都是**READ-COMMITTED(读取提交内容):**，但是你要知道的是InnoDB 存储引擎默认使用 **REPEATABLE-READ（可重读）**并不会有任何性能损失。InnoDB 存储引擎在 **分布式事务** 的情况下一般会用到**SERIALIZABLE(可串行化)**隔离级别。</code></pre>]]></content>
      
      
      <categories>
          
          <category> DB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Oracle </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML解析</title>
      <link href="/2019/04/26/XML%E8%A7%A3%E6%9E%90/"/>
      <url>/2019/04/26/XML%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h1 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h1><hr><p>操作xml文档，将文档的数据读取到内存中。</p><h2 id="解析方式"><a href="#解析方式" class="headerlink" title="解析方式"></a>解析方式</h2><pre><code>DOM 将标记语言文档一次性加载进内存，在内存中形成一棵dom树优点：操作方便，可以对文档进行CRUD的所有操作缺点：占内存SAX 逐行读取，基于事件驱动优点：不占内存，相比DOM效率更高缺点：只能读取，不能增删改</code></pre><h2 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h2><p>常见解析器</p><pre><code>1. JAXP：sun公司提供的解析器，支持dom和sax两种思想2. DOM4J：一款非常优秀的解析器3. Jsoup：jsoup 是一款Java 的HTML解析器，可直接解析某个URL地址、HTML文本内容。它提供了一套非常省力的API，可通过DOM，CSS以及类似于jQuery的操作方法来取出和操作数据。4. PULL：Android操作系统内置的解析器，sax方式的。</code></pre><h3 id="DOM4J"><a href="#DOM4J" class="headerlink" title="DOM4J"></a>DOM4J</h3><p>本文中利用dom4j和xpath的支持进行解析，DOM4J中还提供了其他几种遍历节点的方法，例如枚举(Iterator)、递归、visitor模式等等。</p><p>范例</p><pre><code>1. 导包    dom4j-1.6.1.jar    jaxen-1.1-beta-6.jar2.     public class TestDemo01 {            @Test            public void method() throws DocumentException {            //创建解析器            SAXReader saxReader = new SAXReader();            //解析xml            Document document = saxReader.read(TestDemo01.class.getClassLoader().getResourceAsStream(&quot;student.xml&quot;));            //获取根标签            Element rootElement = document.getRootElement();            /*System.out.println(rootElement);            //获取子标签            List elements = rootElement.elements();            //获取第一个            Object stu1 = elements.get(0);            System.out.println(stu1);            System.out.println(&quot;----------&quot;);            //student个数            List student = rootElement.elements(&quot;student&quot;);            int size = student.size();            System.out.println(size);            System.out.println(&quot;----------&quot;);            //获取第一个学号            Element stu = rootElement.element(&quot;student&quot;);            String s1 = stu.attributeValue(&quot;number&quot;);            System.out.println(s1);            System.out.println(&quot;----------&quot;);            //获取第一个年龄            Element age1 = stu.element(&quot;age&quot;);            String text = age1.getText();            System.out.println(text);            // 即每一级便签和下一级标签用element方法获取第一个        }    }3. 结合xpath            Element element = (Element)rootElement.selectSingleNode(&quot;//student[@number=&apos;heima_0002&apos;]&quot;);            System.out.println(element);//xpath语法可通过xpath API文档查询</code></pre><h4 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h4><p>在idea中编程时，使用Schema约束会在写xml文件是自动出现 <strong>xmlns=”<a href="http://www.itcast.cn/xml&quot;" target="_blank" rel="noopener">http://www.itcast.cn/xml&quot;</a></strong>，使用这样的xml编码方式再结合xpath进行解析时，会发生找不到结果的问题</p><pre><code>&lt;students xmlns=&quot;http://www.itcast.cn/xml&quot;&gt;    &lt;student number=&quot;heima_0001&quot;&gt;    &lt;name&gt;zhangsan&lt;/name&gt;    &lt;age&gt;24&lt;/age&gt;    &lt;sex&gt;male&lt;/sex&gt;    &lt;/student&gt;&lt;/students&gt;</code></pre><p>如获取</p><pre><code>Element element = (Element)rootElement.selectSingleNode(&quot;//student[@number=&apos;heima_0002&apos;]&quot;);  System.out.println(element);</code></pre><p>结果为<strong>null</strong></p><h3 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h3><p>步骤：</p><pre><code>1. 导入jar包        jsoup-1.11.2.jar        JsoupXpath-0.3.2.jar2. 获取Document对象3. 获取对应的标签Element对象4. 获取数据</code></pre><p>代码：</p><pre><code>//2.1获取student.xml的path  String path = JsoupDemo1.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();  //2.2解析xml文档，加载文档进内存，获取dom树---&gt;Document  Document document = Jsoup.parse(new File(path), &quot;utf-8&quot;);  //3.获取元素对象 Element  Elements elements = document.getElementsByTag(&quot;name&quot;);  System.out.println(elements.size());  //3.1获取第一个name的Element对象  Element element = elements.get(0);  //3.2获取数据  String name = element.text();  System.out.println(name);</code></pre><p>对象的使用：</p><pre><code>1. Jsoup：工具类，可以解析html或xml文档，返回Document    * parse：解析html或xml文档，返回Document        * parse​(File in, String charsetName)：解析xml或html文件的。        * parse​(String html)：解析xml或html字符串        * parse​(URL url, int timeoutMillis)：通过网络路径获取指定的html或xml的文档对象2. Document：文档对象。代表内存中的dom树    * 获取Element对象        * getElementById​(String id)：根据id属性值获取唯一的element对象        * getElementsByTag​(String tagName)：根据标签名称获取元素对象集合        * getElementsByAttribute​(String key)：根据属性名称获取元素对象集合        * getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合3. Elements：元素Element对象的集合。可以当做 ArrayList&lt;Element&gt;来使用4. Element：元素对象    1. 获取子元素对象        * getElementById​(String id)：根据id属性值获取唯一的element对象        * getElementsByTag​(String tagName)：根据标签名称获取元素对象集合        * getElementsByAttribute​(String key)：根据属性名称获取元素对象集合        * getElementsByAttributeValue​(String key, String value)：根据对应的属性名和属性值获取元素对象集合    2. 获取属性值        * String attr(String key)：根据属性名称获取属性值    3. 获取文本内容        * String text():获取文本内容        * String html():获取标签体的所有内容(包括字标签的字符串内容)5. Node：节点对象    * 是Document和Element的父类</code></pre><p>快捷查询方式：</p><pre><code>1. selector:选择器    * 使用的方法：Elements    select​(String cssQuery)        * 语法：参考Selector类中定义的语法2. XPath：XPath即为XML路径语言，它是一种用来确定XML（标准通用标记语言的子集）文档中某部分位置的语言    * 使用Jsoup的Xpath需要额外导入jar包。    * 查询w3cshool参考手册，使用xpath的语法完成查询    * 代码：        //1.获取student.xml的path        String path = JsoupDemo6.class.getClassLoader().getResource(&quot;student.xml&quot;).getPath();        //2.获取Document对象        Document document = Jsoup.parse(new File(path), &quot;utf-8&quot;);        //3.根据document对象，创建JXDocument对象        JXDocument jxDocument = new JXDocument(document);        //4.结合xpath语法查询        //4.1查询所有student标签        List&lt;JXNode&gt; jxNodes = jxDocument.selN(&quot;//student&quot;);        for (JXNode jxNode : jxNodes) {            System.out.println(jxNode);        }        System.out.println(&quot;--------------------&quot;);        //4.2查询所有student标签下的name标签        List&lt;JXNode&gt; jxNodes2 = jxDocument.selN(&quot;//student/name&quot;);        for (JXNode jxNode : jxNodes2) {            System.out.println(jxNode);        }        System.out.println(&quot;--------------------&quot;);        //4.3查询student标签下带有id属性的name标签        List&lt;JXNode&gt; jxNodes3 = jxDocument.selN(&quot;//student/name[@id]&quot;);        for (JXNode jxNode : jxNodes3) {            System.out.println(jxNode);        }        System.out.println(&quot;--------------------&quot;);        //4.4查询student标签下带有id属性的name标签 并且id属性值为itcast        List&lt;JXNode&gt; jxNodes4 = jxDocument.selN(&quot;//student/name[@id=&apos;itcast&apos;]&quot;);        for (JXNode jxNode : jxNodes4) {            System.out.println(jxNode);        }</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
            <tag> xpath </tag>
            
            <tag> DOM4J </tag>
            
            <tag> Jsoup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换电脑或重装系统时的博客配置</title>
      <link href="/2019/03/30/%E5%8D%9A%E5%AE%A2%E9%87%8D%E9%85%8D%E7%BD%AE/"/>
      <url>/2019/03/30/%E5%8D%9A%E5%AE%A2%E9%87%8D%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>首先感谢网络上的大佬们，查阅了一些人的博客总算解决了这一难题。废话少说，下面是简单的教程。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ul><li>安装node.js</li><li>安装Git</li><li>备份你的本地博客目录的部分文件夹</li></ul><p><a href="http://jiguangwu.top/2018/01/10/hexo/#more" title="下载点此" target="_blank" rel="noopener">node.js和Git的安装包参考</a></p><p>拷贝文件夹如下</p><blockquote><p>_config.yml</p><p>theme/</p><p>source/</p><p>scaffolds/</p><p>package.json</p><p>.gitignore</p></blockquote><h2 id="配置你的Git"><a href="#配置你的Git" class="headerlink" title="配置你的Git"></a>配置你的Git</h2><p>桌面右键选择bash here,设置用户名称和邮件地址。</p><blockquote><p>1 $ git config –global user.name “username”</p><p>2 $ git config –global user.email “<a href="mailto:username@xxxx.com" target="_blank" rel="noopener">username@xxxx.com</a>“</p></blockquote><h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>输入</p><blockquote><p>$ ssh-keygen -t rsa -C “你的邮件地址”</p></blockquote><p>然后连续按三次回车，会生成id_rsa.pub文件，用记事本打开它，然后全部复制即可，待会要用。这个文件的地址：C:\Users\Administrator.ssh<br>打开你的GitHub主页，打开设置-&gt;Deploy keys-&gt;Add deploy key.<br>这里名称随便取，在下面粘贴内容保存即可。</p><p>我们回来测试下是否把SSH配置成功了。<br>继续在bash里输入</p><blockquote><p> $ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p></blockquote><p>如果提示 Are you sure you want to continue connecting (yes/no)? ，输入yes，然后会看到 successfully authenticated,but github…..<br>看到这个意味着已成功！</p><h2 id="正式工作"><a href="#正式工作" class="headerlink" title="正式工作"></a>正式工作</h2><p>接下来时hexo和一些组件的安装，恭喜了很快了。</p><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>我们打开cmd命令行，输入</p><blockquote><p>npm install -g hexo</p></blockquote><p>这里可能会很慢，所以推荐使用淘宝镜像。</p><blockquote><p>npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a></p></blockquote><p>验证是否安装成功使用：</p><blockquote><p>cnpm -v</p></blockquote><p>安装了淘宝镜像后，都使用cnpm指令：</p><blockquote><p>cnpm install -g hexo   // 安装 hexo</p></blockquote><p>验证Hexo是否安装成功使用：</p><blockquote><p>hexo -v</p></blockquote><h1 id="安装一些组件"><a href="#安装一些组件" class="headerlink" title="安装一些组件"></a>安装一些组件</h1><blockquote><p> npm install hexo-deployer-git –save  // 文章部署到 git 的模块（下面为选择安装）</p><p> npm install hexo-generator-feed –save  // 建立 RSS 订阅</p><p> npm install hexo-generator-sitemap –save // 建立站点地图</p></blockquote><h1 id="部署到Github"><a href="#部署到Github" class="headerlink" title="部署到Github"></a>部署到Github</h1><p>输入指令</p><blockquote><p>hexo generate</p><p>hexo deploy</p></blockquote><p>没有报错就OK了。<br>这里讲讲hexo的一些快捷命令</p><blockquote><p>hexo g == hexo generate</p><p>hexo d == hexo deploy</p><p>hexo s == hexo server</p><p>hexo n == hexo new</p></blockquote><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>尝试部署文章并使用以下指令更新部署</p><blockquote><p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p></blockquote><p>成功部署，恭喜你！博客重配置成功！</p><p>如果觉得有用，不如给个<a href="https://github.com/JiGuangwuu/JiGuangwuu.github.io" target="_blank" rel="noopener">Star Or Follow</a>，感谢。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式</title>
      <link href="/2019/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/03/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h1><p>设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><h1 id="何为单例模式"><a href="#何为单例模式" class="headerlink" title="何为单例模式"></a>何为单例模式</h1><p>单例模式(Singleton)，又称单态模式或者单件模式。即保证一个类仅有一个实例，并提供一个访问它的全局访问点。<br>目的是即控制特定的类只产生一个对象，也允许在一定情况下灵活的改变对象的个数。</p><h1 id="如何实现"><a href="#如何实现" class="headerlink" title="如何实现"></a>如何实现</h1><p>先看一段代码</p><pre><code>public class Thing {    private Thing(){    }    private static  Thing instance = new Thing();    //这段代码保证了Thread safe    public static Thing getInstance(){        return instance;    ｝｝    </code></pre><p>测试类</p><pre><code>public class TestDemo {    public static void main(String[] args) {        Thing t1 = Thing.getInstance();        Thing t2 = Thing.getInstance();        System.out.println(t1);        System.out.println(t2);    }}</code></pre><p>输出t1和t2的结果是一致的。<br>可以发现，我们将构造方法私有化了，这使得外面的类无法通过引用来创建对象；同时为了保证类的可用性，就必须提供一个自己的对象以及访问这个对象的静态方法。<br>因此，我们应该明白：<br>单例模式只有一个角色，而客户通过调用类的方法来创建对象。</p><p><img src="https://i.loli.net/2019/04/08/5cab563abef10.png" alt="单例原理"></p><h1 id="还有什么"><a href="#还有什么" class="headerlink" title="还有什么"></a>还有什么</h1><p>在上面的Thing类中我们“迫不及待”的创建了对象，但如果这个对象我们很长时间都没有使用就浪费了内存空间，因此称之为<strong>饿汉式</strong>。存在另一种写法，即<strong>懒汉式</strong>。<br>看这段代码</p><pre><code>private static Thing instance;public static Thing getInstance(){                    if (instance==null){               instance = new Thing();            }            return instance;}</code></pre><p>很明显，当程序真正需要这个对象的时候我们才开始创建。但是这在多线程情况下是有问题的，为了防止多线程环境中产生多个实例，我们做出改进，使用同步处理。</p><pre><code>private static Thing instance;public static Thing getInstance(){     //如果是对象还没创建的时候使用同步，如果对象已经创建完了，就不要同步了  ，这样效率就可以提高    if (instance==null){        synchronized (Thing.class){            if (instance==null){            //说明对象还没创建，所以里面使用了同步s               instance = new Thing();            }        }    }    return instance;}</code></pre><p>这里我们使用的是同步代码块，为什么不要同步方法呢？</p><pre><code> private static Thing instance;public synchronized static Thing getInstance(){    if (instance==null){        instance = new Thing();    }    return instance;}</code></pre><p>通过使用同步方法，迫使每个线程在进入这个方法前要等候别的进程离开该方法。但同步会降低性能，并且这里只有第一次执行该方法时才会正在需要同步。之后每一次调用这个方法，同步都是浪费的。</p><h1 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h1><p>在学习单例模式时，通过这方面的书籍了解到以下问题</p><p><img src="https://i.loli.net/2019/04/08/5cab564492dd7.png" alt></p><p>如果觉得有用，不如给个<a href="https://github.com/JiGuangwuu/JiGuangwuu.github.io" target="_blank" rel="noopener">Star Or Follow</a>，感谢。</p><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> 设计模式和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> interview </tag>
            
            <tag> designPattern </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于我的考研</title>
      <link href="/2019/02/20/190405/"/>
      <url>/2019/02/20/190405/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2019/04/05/5ca771980ba09.png" alt="1"></p><h3 id="不去可惜了"><a href="#不去可惜了" class="headerlink" title="不去可惜了"></a>不去可惜了</h3><h3 id="一般般的去干啥"><a href="#一般般的去干啥" class="headerlink" title="一般般的去干啥"></a>一般般的去干啥</h3><h3 id="差点？人生就是这样"><a href="#差点？人生就是这样" class="headerlink" title="差点？人生就是这样"></a>差点？人生就是这样</h3><h3 id="不去！"><a href="#不去！" class="headerlink" title="不去！"></a>不去！</h3>]]></content>
      
      
      <categories>
          
          <category> 逆旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mood </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何将本地项目部署到Github</title>
      <link href="/2019/02/05/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0github/"/>
      <url>/2019/02/05/%E9%83%A8%E7%BD%B2%E9%A1%B9%E7%9B%AE%E5%88%B0github/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>众所周知，GitHub是一个面向开源及私有软件项目的托管平台，那我们该如何将本地项目导入到Github上呢，这里，我写一个简单的教程，希望对你有所帮助。</p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>确定你的Git安装了，如果需要<a href="http://jiguangwu.top/2018/01/10/hexo/#more" title="下载参考" target="_blank" rel="noopener">点击此处</a></p><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>首先在Github上新建一个repository，命名随意（以我为例，新建了一个Demo），勾选如图，create。</p><p><img src="https://i.loli.net/2019/03/26/5c9a1697490d0.png" alt="1"></p><p>然后，进入你的repository,打开settings，可以看到Github Pages的设置，在source中选择master branch。</p><p><img src="https://i.loli.net/2019/03/26/5c9a16d480146.png" alt="2"></p><p>最后，选择完会刷新页面，在去看Gith Pages时，会有显示一个网址，这就是你之后访问你项目页面的网址。<br><img src="https://i.loli.net/2019/03/26/5c9a16df8e603.png" alt="3"></p><h2 id="快了"><a href="#快了" class="headerlink" title="快了"></a>快了</h2><p>在一个盘里右键点击git bash here，打开bash命令行。如图，输入命令在D盘创建了文件夹Demo，第三个命令是克隆地址，格式为</p><blockquote><p><a href="https://github.com/用户名/项目名.git" target="_blank" rel="noopener">https://github.com/用户名/项目名.git</a></p></blockquote><p><img src="https://i.loli.net/2019/03/26/5c9a16eab9cd1.png" alt="4"></p><p>这时候你会发现你的D盘会多个Demo文件夹，打开它，进入根目录。</p><p>将自己的项目文件粘贴到这个根目录中。</p><p><img src="https://i.loli.net/2019/03/26/5c9a16eca4230.png" alt="5"></p><p><img src="https://i.loli.net/2019/03/26/5c9a16eebd4f2.png" alt="6"></p><p>执行如下命令，</p><p><img src="https://i.loli.net/2019/03/26/5c9a171336786.png" alt="7"></p><p>这里面注意，第一次操作需要你输入相关账号和密码，到时根据提示输入即可<br><img src="https://i.loli.net/2019/03/26/5c9a171e9432f.png" alt="8"></p><p><img src="https://i.loli.net/2019/03/26/5c9a1723ac514.png" alt="9"></p><h2 id="完成"><a href="#完成" class="headerlink" title="完成"></a>完成</h2><p>利用那个网址测试即可。</p><p>如果觉得有用，不如给个<a href="https://github.com/JiGuangwuu/JiGuangwuu.github.io" target="_blank" rel="noopener">starorfollow</a>，感谢。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> blog </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML简介与约束</title>
      <link href="/2018/12/22/XML%E5%85%A5%E9%97%A8/"/>
      <url>/2018/12/22/XML%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><hr><ul><li><p>XML是可扩展标记语言（Extensible Markup Language），可扩展即标签都是自定义的。</p></li><li><p>功能：存储数据    </p><pre><code>1. 配置文件2. 在网络中传输</code></pre></li><li><p>与HTML的区别</p><pre><code>1. xml标签都是自定义的，html标签是预定义。2. xml的语法严格（严格区分大小写），html语法松散3. xml是存储数据的，html是展示数据</code></pre></li><li><p>各个平台之间的数据传输类型，但现在已经被JSON替换了。XML可以存储简单、小量的数据。</p></li></ul><h1 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h1><hr><h2 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h2><p>注意：</p><ul><li>属性值必须使用引号(单双都可)引起来</li><li>标签名称区分大小写</li></ul><p>示例</p><pre><code>    &lt;?xml version=&apos;1.0&apos; ?&gt;&lt;users&gt;    &lt;user id=&apos;1&apos;&gt;        &lt;name&gt;zhangsan&lt;/name&gt;        &lt;age&gt;23&lt;/age&gt;        &lt;gender&gt;男&lt;/gender&gt;    &lt;/user&gt;    &lt;user id=&apos;2&apos;&gt;        &lt;name&gt;lisi&lt;/name&gt;        &lt;age&gt;25&lt;/age&gt;        &lt;gender&gt;男&lt;/gender&gt;    &lt;/user&gt;&lt;/users&gt;</code></pre><h2 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h2><pre><code>1. 文档声明    1. 格式：&lt;?xml 属性列表 ?&gt;    2. 属性列表：        * version：版本号，必须的属性        * encoding：编码方式。告知解析引擎当前文档使用的字符集，默认值：ISO-8859-1        * standalone：是否独立            * 取值：                * yes：不依赖其他文件                * no：依赖其他文件2. 指令(了解)：结合css的    * &lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;a.css&quot; ?&gt;3. 标签：标签名称自定义的    * 规则：        * 名称可以包含字母、数字以及其他的字符         * 名称不能以数字或者标点符号开始         * 名称不能以字母 xml（或者 XML、Xml 等等）开始         * 名称不能包含空格 4. 属性：    id属性值唯一5. 文本：    * CDATA区：在该区域中的数据会被原样展示        * 格式：  &lt;![CDATA[ 数据 ]]&gt;</code></pre><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>约束为规定XML文档的编写规则。</p><p>第一种约束 <strong>DTD</strong></p><pre><code>外部dtd：将约束的规则定义在外部的dtd文件中                    * 本地：&lt;!DOCTYPE 根标签名 SYSTEM &quot;dtd文件的位置&quot;&gt;                    * 网络：&lt;!DOCTYPE 根标签名 PUBLIC &quot;dtd文件名字&quot; &quot;dtd文件的位置URL&quot;&gt;内部dtd：写在内部</code></pre><p>外部范例</p><pre><code>//student.dtd文件&lt;!ELEMENT students (student+) &gt;&lt;!ELEMENT student (name,age,sex)&gt;&lt;!ELEMENT name (#PCDATA)&gt;&lt;!ELEMENT age (#PCDATA)&gt;&lt;!ELEMENT sex (#PCDATA)&gt;&lt;!ATTLIST student number ID #REQUIRED&gt;//student.xml文件&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;!DOCTYPE students SYSTEM &quot;student.dtd&quot;&gt;&lt;students&gt;    &lt;student number=&quot;s001&quot;&gt;        &lt;name&gt;zhangsan&lt;/name&gt;        &lt;age&gt;abc&lt;/age&gt;        &lt;sex&gt;hehe&lt;/sex&gt;    &lt;/student&gt;    &lt;student number=&quot;s002&quot;&gt;        &lt;name&gt;lisi&lt;/name&gt;        &lt;age&gt;24&lt;/age&gt;        &lt;sex&gt;female&lt;/sex&gt;    &lt;/student&gt;&lt;/students&gt;</code></pre><p>第二种约束 <strong>Schema</strong></p><p>引入</p><pre><code>    1. 填写xml文档的根元素    2. 引入xsi前缀.  xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;    3. 引入xsd文件命名空间.  xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;    4. 为每一个xsd约束声明一个前缀,作为标识  xmlns=&quot;http://www.itcast.cn/xml&quot;&lt;students   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;        xmlns=&quot;http://www.itcast.cn/xml&quot;        xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;&gt;</code></pre><p>范例</p><p>student.xsd</p><pre><code>&lt;?xml version=&quot;1.0&quot; ?&gt;&lt;xsd:schema xmlns=&quot;http://www.itcast.cn/xml&quot;            xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;            targetNamespace=&quot;http://www.itcast.cn/xml&quot; elementFormDefault=&quot;qualified&quot;&gt;    &lt;xsd:element name=&quot;students&quot; type=&quot;studentsType&quot;/&gt;    &lt;xsd:complexType name=&quot;studentsType&quot;&gt;        &lt;xsd:sequence&gt;            &lt;xsd:element name=&quot;student&quot; type=&quot;studentType&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;/&gt;        &lt;/xsd:sequence&gt;    &lt;/xsd:complexType&gt;    &lt;xsd:complexType name=&quot;studentType&quot;&gt;        &lt;xsd:sequence&gt;            &lt;xsd:element name=&quot;name&quot; type=&quot;xsd:string&quot;/&gt;            &lt;xsd:element name=&quot;age&quot; type=&quot;ageType&quot; /&gt;            &lt;xsd:element name=&quot;sex&quot; type=&quot;sexType&quot; /&gt;        &lt;/xsd:sequence&gt;        &lt;xsd:attribute name=&quot;number&quot; type=&quot;numberType&quot; use=&quot;required&quot;/&gt;    &lt;/xsd:complexType&gt;    &lt;xsd:simpleType name=&quot;sexType&quot;&gt;        &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;            &lt;xsd:enumeration value=&quot;male&quot;/&gt;            &lt;xsd:enumeration value=&quot;female&quot;/&gt;        &lt;/xsd:restriction&gt;    &lt;/xsd:simpleType&gt;    &lt;xsd:simpleType name=&quot;ageType&quot;&gt;        &lt;xsd:restriction base=&quot;xsd:integer&quot;&gt;            &lt;xsd:minInclusive value=&quot;0&quot;/&gt;            &lt;xsd:maxInclusive value=&quot;256&quot;/&gt;        &lt;/xsd:restriction&gt;    &lt;/xsd:simpleType&gt;    &lt;xsd:simpleType name=&quot;numberType&quot;&gt;        &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;            &lt;xsd:pattern value=&quot;heima_\d{4}&quot;/&gt;        &lt;/xsd:restriction&gt;    &lt;/xsd:simpleType&gt;&lt;/xsd:schema&gt;</code></pre><p>student.xml</p><pre><code>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;&lt;students   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;            xmlns=&quot;http://www.itcast.cn/xml&quot;            xsi:schemaLocation=&quot;http://www.itcast.cn/xml  student.xsd&quot;&gt;    &lt;student number=&quot;heima_0001&quot;&gt;        &lt;name&gt;tom&lt;/name&gt;        &lt;age&gt;18&lt;/age&gt;        &lt;sex&gt;male&lt;/sex&gt;    &lt;/student&gt;&lt;/students&gt;</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat问题和项目部署</title>
      <link href="/2018/10/09/tomcat%E9%85%8D%E7%BD%AE/"/>
      <url>/2018/10/09/tomcat%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat可能出现的问题"><a href="#Tomcat可能出现的问题" class="headerlink" title="Tomcat可能出现的问题"></a>Tomcat可能出现的问题</h1><hr><pre><code>1. 黑窗口一闪而过：    * 原因： 没有正确配置JAVA_HOME环境变量    * 解决方案：正确配置JAVA_HOME环境变量，并在path中添加%JAVA_HOME%\bin;2. 启动报错：    1. 暴力修改：找到占用的端口号，并且找到对应的进程，杀死该进程        * 命令行输入netstat -ano，查询到端口豪对应进程的PID    2. 温柔修改：修改自身的端口号        * conf/server.xml        * &lt;Connector port=&quot;8888&quot; protocol=&quot;HTTP/1.1&quot;           connectionTimeout=&quot;20000&quot;           redirectPort=&quot;8445&quot; /&gt;        * 一般会将tomcat的默认端口号修改为80。80端口号是http协议的默认端口号。            * 好处：在访问时，就不用输入端口号</code></pre><h1 id="在Tomcat中部署项目的方式"><a href="#在Tomcat中部署项目的方式" class="headerlink" title="在Tomcat中部署项目的方式"></a>在Tomcat中部署项目的方式</h1><hr><pre><code>1. 直接将项目放到webapps目录下即可。    * /WebProject：项目的访问路径--&gt;虚拟目录    * 简化部署：将项目打成一个war包，再将war包放置到webapps目录下。        * war包会自动解压缩2. 配置conf/server.xml文件    在&lt;Host&gt;标签体中配置    &lt;Context docBase=&quot;D:\WebProject&quot; path=&quot;/demo&quot; /&gt;    * docBase:项目存放的路径    * path：虚拟目录3. 在conf\Catalina\localhost创建任意名称的xml文件。在文件中编写    &lt;Context docBase=&quot;D:\WebProject&quot; /&gt;    * 虚拟目录：xml文件的名称4. 在IDE中</code></pre>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>eclipse的maven插件安装</title>
      <link href="/2018/09/07/eclipse%E6%8F%92%E4%BB%B6maven/"/>
      <url>/2018/09/07/eclipse%E6%8F%92%E4%BB%B6maven/</url>
      
        <content type="html"><![CDATA[<p>以eclipse kepler为例，<br>官网下载地址：<a href="http://www.eclipse.org/downloads/packages/release/Kepler/SR2" target="_blank" rel="noopener">http://www.eclipse.org/downloads/packages/release/Kepler/SR2</a></p><p>1.打开eclipse，help–install new software…</p><p>2.workwith里输入：<a href="http://download.eclipse.org/releases/kepler，输入完会有提示地址出现，点击回车静待" target="_blank" rel="noopener">http://download.eclipse.org/releases/kepler，输入完会有提示地址出现，点击回车静待</a>…</p><p>3.在filter框中输入maven便能定位要安装的插件<br><img src="https://i.imgur.com/vyBFPux.png" alt></p><p>4.选择“Collaboration”-“m2e - Maven Integration for Eclipse”，并点击next按钮进行安装</p><p>5.安装完成重启eclipse即可</p><p>6.配置你的maven</p><p>如果觉得有用，不如给个<a href="https://github.com/JiGuangwuu/JiGuangwuu.github.io" target="_blank" rel="noopener">Star Or Follow</a>，感谢。</p>]]></content>
      
      
      <categories>
          
          <category> JavaWeb </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
            <tag> eclipse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>构造、静态代码块面试题</title>
      <link href="/2018/06/05/%E6%9E%84%E9%80%A0%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97/"/>
      <url>/2018/06/05/%E6%9E%84%E9%80%A0%E9%9D%99%E6%80%81%E4%BB%A3%E7%A0%81%E5%9D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="复习"><a href="#复习" class="headerlink" title="复习"></a>复习</h1><p>构造代码块的执行时机：每次我们调用构造方法的时候都会先执行构造代码块中的代码，然后才去执行对应的构造方法中的代码。</p><p>静态代码块的执行时机：静态代码块其实就是在类加载的时候执行，一个类只会加载一次，所以静态代码块也最多只会执行一次。</p><pre><code>public class Test01 {    {        System.out.println(&quot;Test01的构造代码块&quot;);    }    static {        System.out.println(&quot;Test01的静态代码块&quot;);    }    public Test01() {        System.out.println(&quot;Test01的构造方法&quot;);    }    public static void main(String[] args) {        Student stu = new Student();        Student stu2 = new Student();    }}class Student {    {        System.out.println(&quot;Student的构造代码块&quot;);    }    static {        System.out.println(&quot;Student的静态代码块&quot;);    }    public Student() {        System.out.println(&quot;Student的构造方法&quot;);    }}</code></pre><p>答案：Test01的静态代码块 Student的静态代码块 Student的构造代码块<br>Student的构造方法  Student的构造代码块  Student的构造方法</p><p>如果觉得有用，不如给个<a href="https://github.com/JiGuangwuu/JiGuangwuu.github.io" target="_blank" rel="noopener">Star Or Follow</a>，感谢。</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多态的一道面试题</title>
      <link href="/2018/05/11/%E5%A4%9A%E6%80%81%E7%9A%84%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2018/05/11/%E5%A4%9A%E6%80%81%E7%9A%84%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>类A：</p><pre><code>class A {     public String show(D obj){         return (&quot;A and D&quot;);      }       public String show(A obj){                return (&quot;A and A&quot;);     }   }   </code></pre><p>类B：</p><pre><code>class B extends A{      public String show(B obj){         return (&quot;B and B&quot;);      }      public String show(A obj){         return (&quot;B and A&quot;);      }   }  </code></pre><p>类C：</p><pre><code>class C extends B{}</code></pre><p>类D：</p><pre><code>class D extends B{}</code></pre><p>测试类：</p><pre><code>class  DynamicTest{       public static void main(String[] args){   A a1 = new A();     A a2 = new B();     B b = new B();     C c = new C();      D d = new D();     System.out.println(a1.show(b));      System.out.println(a1.show(c));     System.out.println(a1.show(d));     System.out.println(a2.show(b));                                  System.out.println(a2.show(c));                                System.out.println(a2.show(d));           System.out.println(b.show(b));       System.out.println(b.show(c));     System.out.println(b.show(d));         }}</code></pre><p>答案：</p><pre><code>System.out.println(a1.show(b));       AASystem.out.println(a1.show(c));     AASystem.out.println(a1.show(d));      ADSystem.out.println(a2.show(b));     BA     编译看左边，看右边可有重写              System.out.println(a2.show(c));     BA   同样，看可有重写！                    System.out.println(a2.show(d));     AD   编译看左边，但没有重写System.out.println(b.show(b));       BB   System.out.println(b.show(c));      BB   这里父类和爷爷类都可以，取最近的System.out.println(b.show(d));           AD   B是A的子类 ，会把A的方法都继承</code></pre><p>如果觉得有用，不如给个<a href="https://github.com/JiGuangwuu/JiGuangwuu.github.io" target="_blank" rel="noopener">Star Or Follow</a>，感谢。</p>]]></content>
      
      
      <categories>
          
          <category> JavaSE </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>冒泡、插入、选择排序</title>
      <link href="/2018/03/03/%E6%8E%92%E5%BA%8F1/"/>
      <url>/2018/03/03/%E6%8E%92%E5%BA%8F1/</url>
      
        <content type="html"><![CDATA[<h1 id="问题的引入"><a href="#问题的引入" class="headerlink" title="问题的引入"></a>问题的引入</h1><h2 id="从键盘输入10个整数并按从大到小的顺序排列，输出结果"><a href="#从键盘输入10个整数并按从大到小的顺序排列，输出结果" class="headerlink" title="从键盘输入10个整数并按从大到小的顺序排列，输出结果"></a><em>从键盘输入10个整数并按从大到小的顺序排列，输出结果</em></h2><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>基本思想：比较所有相邻的两个元素，如果第一个数比第二个数大就交换它们两个。最后的数字应该最大得到升序排列。</p><p><img src="https://i.imgur.com/sTuENJp.png" alt></p><pre><code>package top.jgw;import java.util.Arrays;import java.util.Scanner;public class BubbleSort {     public static void main(String[] args) {           Scanner ra = new Scanner(System.in);           System.out.print(&quot;请输入10个数：&quot;);           int[] arr = new int[10];           for(int a=0;a&lt;10;a++){            arr[a] = ra.nextInt();            }      System.out.println(&quot;排序前的arr：&quot;+Arrays.toString(arr));       for(int i=arr.length-1;i&gt;0;i--){        for(int j=1;j&lt;=i;j++){            if(arr[j-1]&gt;arr[j]){                 int temp = arr[j-1];                 arr[j-1] = arr[j];                 arr[j] = temp;              }        }  }  System.out.println(&quot;排序后的arr ：&quot;+Arrays.toString(arr));  }}</code></pre><p>结论：冒泡排序是一种稳定的排序方法。　</p><ul><li>若文件初状为正序，则一趟起泡就可完成排序，排序码的比较次数为n-1，且没有记录移动，时间复杂度是O(n)</li><li>若文件初态为逆序，则需要n-1趟起泡，每趟进行n-i次排序码的比较，且每次比较都移动三次，比较和移动次数均达到最大值∶O(n2)</li><li>起泡排序平均时间复杂度为O(n2)</li></ul><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>基本思想：每一步将一个待排序的记录，按其顺序码大小插入到前面已经排序的序列的合适位置（从后向前找到合适位置后），直到全部插入排序完为止。</p><p><img src="https://i.imgur.com/rrF3K6J.png" alt></p><pre><code>package top.jgw;import java.util.Arrays;import java.util.Scanner;public class InsertionSort {    public static void main(String[] args){        int i,j;        int temp=0;        Scanner ra=new Scanner(System.in);        System.out.print(&quot;请输入10个数：&quot;);        int arr[]=new int[10];        for(int a=0;a&lt;10;a++){            arr[a]=ra.nextInt();        }    System.out.println(&quot;排序前的arr: &quot;+Arrays.toString(arr));    for(i=1;i&lt;arr.length;i++){        temp=arr[i];        for(j=i-1;j&gt;=0 &amp;&amp; temp&lt;arr[j];j--){            arr[j+1]=arr[j];        }            arr[j+1]=temp;        }    System.out.println(&quot;排序后的arr：&quot;+Arrays.toString(arr));    }}</code></pre><p>结论：直接插入排序也是稳定的排序。<br>文件初态不同时，直接插入排序所耗费的时间有很大差异。若文件初态为正序，则每个待插入的记录只需要比较一次就能够找到合适的位置插入，故算法的时间复杂度为O(n)，这时最好的情况。若初态为反序，则第i个待插入记录需要比较i+1次才能找到合适位置插入，故时间复杂度为O(n2)，这时最坏的情况。</p><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>基本思想：每一次排序都从待排序序列中选择一个最小元素放到已排好的序列的末端，重复此步骤可得到升序序列。</p><p><img src="https://i.imgur.com/Cmkm5Do.png" alt></p><pre><code>package top.jgw;import java.util.Arrays;import java.util.Scanner;public class SelectionSort {public static void main(String[] args){    Scanner ra=new Scanner(System.in);    System.out.print(&quot;请输入10个数: &quot;);    int arr[]=new int[10];    for(int a=0;a&lt;10;a++){        arr[a]=ra.nextInt();    }    System.out.println(&quot;排序前的arr: &quot;+Arrays.toString(arr));    int temp=0;    for(int i=0;i&lt;arr.length-1;i++){        for(int j=i+1;j&lt;arr.length;j++){            if(arr[i]&gt;arr[j]){                temp=arr[i];                arr[i]=arr[j];                arr[j]=temp;            }        }        }    System.out.println(&quot;排序后的arr: &quot;+Arrays.toString(arr));    }}</code></pre><p>结论：简单选择排序是不稳定的排序，时间复杂度：T(n)=O(n2)。</p><p><em>日后补充…</em></p><p>如果觉得有用，不如给个<a href="https://github.com/JiGuangwuu/JiGuangwuu.github.io" target="_blank" rel="noopener">Star Or Follow</a>，感谢。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式和数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sort </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo＋next主题搭建GitHub blog干货教程</title>
      <link href="/2018/01/10/hexo/"/>
      <url>/2018/01/10/hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本人开始并非使用next主题，这个大家可以去hexo官网<a href="https://hexo.io/themes/" target="_blank" rel="noopener">themes</a>处挑选自己喜欢的。<br>注意：点击主题预览图可以去预览下，点击主题名就可以去GitHub页面copy了。<br>但个人觉得next主题更好，bug少，拓展性强。好了，废话少说，进入正题。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul><li>注册github账号</li><li>安装node.js  </li><li>链接：<a href="https://pan.baidu.com/s/1mji9SmO" target="_blank" rel="noopener">https://pan.baidu.com/s/1mji9SmO</a> 密码：fjw1</li><li>安装git </li><li>链接：<a href="https://pan.baidu.com/s/1dGUlqEH" target="_blank" rel="noopener">https://pan.baidu.com/s/1dGUlqEH</a> 密码：q9ws<br>我的电脑是Windows10，其他你根据我提供的百度云链接下载即可。安装git时全打勾。</li></ul><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><p>新建一个 你的用户名.github.io的仓库，比如说你的GitHub用户名是abc,那么你新建仓库名叫abc.github.io,你的博客搭建好之后访问的网站也就是 <a href="https://abc.github.io了。" target="_blank" rel="noopener">https://abc.github.io了。</a></p><p><img src="https://i.loli.net/2019/03/26/5c9a1bdf14b7a.png" alt></p><p><img src="https://i.loli.net/2019/03/26/5c9a1be09c749.png" alt><br>那怎么删除仓库呢？？？<br>打开settings</p><p><img src="https://i.loli.net/2019/03/26/5c9a1be6b70f2.png" alt></p><p><img src="https://i.loli.net/2019/03/26/5c9a1be31d9a3.png" alt></p><h2 id="创建博客根目录"><a href="#创建博客根目录" class="headerlink" title="创建博客根目录"></a>创建博客根目录</h2><p>在一个磁盘里创建一个文件夹，比如我，在D盘创建了一个blog文件夹。</p><h1 id="正式工作"><a href="#正式工作" class="headerlink" title="正式工作"></a>正式工作</h1><h2 id="配置SSH-Key"><a href="#配置SSH-Key" class="headerlink" title="配置SSH Key"></a>配置SSH Key</h2><p>桌面右键打开git bash here,输入</p><blockquote><p> $ cd ~/. ssh // 检查本机已存在的 ssh 密钥</p></blockquote><p>再接着输入</p><blockquote><p>ssh-keygen -t rsa -C “你的邮件地址”</p></blockquote><p>然后连续按三次回车，会生成id_rsa.pub文件，用记事本打开它，然后全部复制即可，待会要用。这个文件的地址：C:\Users\Administrator.ssh<br>打开你的GitHub主页，打开设置-&gt;Deploy keys-&gt;Add deploy key.<br>这里名称随便取，在下面粘贴内容保存即可，有需要打勾就打勾。</p><p>我们回来测试下是否把SSH配置成功了。<br>继续在bash里输入</p><blockquote><p>$ ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a></p></blockquote><p>如果提示 Are you sure you want to continue connecting (yes/no)? ，输入yes，然后会看到 successfully authenticated,but github…..<br>看到这个意味着已成功！</p><h2 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h2><blockquote><p> $ git config –global user.name “xxx”// 你的github用户名，比如上面的abc<br>$ git config –global user.email  “<a href="mailto:xxx@qq.com" target="_blank" rel="noopener">xxx@qq.com</a>“// 填写你的github注册邮箱</p></blockquote><h1 id="使用hexo"><a href="#使用hexo" class="headerlink" title="使用hexo"></a>使用hexo</h1><h2 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h2><p>我们打开cmd命令行，输入</p><blockquote><p> npm install -g hexo</p></blockquote><p>这里可能会很慢，所以推荐使用淘宝镜像。</p><blockquote><p>安装：<code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code> </p><p>验证是否安装成功使用：<code>cnpm -v</code><br>这里使用使用： <code>cnpm install -g hexo安装</code>hexo</p><p>验证Hexo是否安装成功使用：<code>hexo -v</code> </p></blockquote><h2 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h2><p>打开我们之前创建的文件夹，比如我的blog，右击鼠标，打开git bash here,输入</p><blockquote><p>$ hexo init</p></blockquote><p>我们的文件夹会自动下载一些文件到这个blog目录里。</p><p>继续输入</p><blockquote><p>$ hexo g<br>$ hexo s</p></blockquote><p>hexo s是指启动服务，成功打开后会有提示，登录localhost:4000即可看到初始页面，到这里你的blog就基本搭建好了。</p><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>在bash里输入</p><blockquote><p> $ hexo new post “文章名”</p></blockquote><p>然后去blog/source/_posts就可以看到</p><h2 id="上传到GitHub"><a href="#上传到GitHub" class="headerlink" title="上传到GitHub"></a>上传到GitHub</h2><p>配置_config.yml中的deploy部分，注意这里的_config.yml文件是blog根目录，并非themes里的同名文件。<br>配置如下(xxx为你的GitHub名)</p><blockquote><p> deploy:<br>  type: git<br>  repository: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxx/xxx.github.io.git<br>  branch: master</p></blockquote><p>再次注意：关于_config.yml文件的配置，冒号后一定要加个空格，否则就无法部署了。</p><p>一切完成后在bash中继续输入</p><blockquote><p> npm install hexo-deployer-git –save #这里是安装插件，不然无法deploy</p></blockquote><p>然后输入以下就可以了</p><blockquote><p> hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p></blockquote><p>成功后会提示：Deploy done：git  证明成功啦。这是打开你的xxx.github.io就可以看到网页啦！</p><h2 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h2><p>打开<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next使用文档</a>有详细的教程。<br>主题教程以及拓展：<br><img src="https://i.imgur.com/lotL1do.png" alt></p><h1 id="绑定个性域名"><a href="#绑定个性域名" class="headerlink" title="绑定个性域名"></a>绑定个性域名</h1><h2 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h2><p>在阿里云或腾讯云申请域名。我是在阿里云申请的，实名认证很快，推荐。</p><h2 id="解析域名"><a href="#解析域名" class="headerlink" title="解析域名"></a>解析域名</h2><p>按我的内容来即可。<br><img src="https://i.loli.net/2019/03/26/5c9a1b95b0be7.png" alt></p><h2 id="部署域名"><a href="#部署域名" class="headerlink" title="部署域名"></a>部署域名</h2><p>在blog根目录的source文件夹中新建无后缀文件 CNAME。里面内容只写上你的域名即可，注意不需要www<br>按之前的顺序deploy即可</p><p>如果觉得有用，不如给个<a href="https://github.com/JiGuangwuu/JiGuangwuu.github.io" target="_blank" rel="noopener">Star Or Follow</a>，感谢。</p>]]></content>
      
      
      <categories>
          
          <category> 技术栈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>出发永远是美好的一件事</title>
      <link href="/2018/01/07/%E5%87%BA%E5%8F%91/"/>
      <url>/2018/01/07/%E5%87%BA%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<p>去做就是啦。</p><p>总结了一七再去展望一八，哈哈我是真想做个技术流人才然后……<br>忙着结束手头上的事情，项目等等，想着去全身心投入到学习中，这是促进我去搭建自己的独立博客的初衷，去学习，去整理，去分享。<br>大学也浪了大半了，两次六级考试都几乎零准备，湖泊你说咋写来着？</p><p>要说新年计划的话，最近打算好好总结Java的知识，以及对基本框架，数据结构与算法的学习，对博客的维护与优化，还有考研的准备！</p><p>新年快乐！<br><img src="https://i.loli.net/2018/01/07/5a5211e581fdc.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 逆旅 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mood </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
